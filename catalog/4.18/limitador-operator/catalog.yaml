---
defaultChannel: stable
icon:
  base64data: 
  mediatype: image/png
name: limitador-operator
schema: olm.package
---
entries:
  - name: limitador-operator.v1.0.2
  - name: limitador-operator.v1.1.0
    replaces: limitador-operator.v1.0.2
  - name: limitador-operator.v1.1.1
    replaces: limitador-operator.v1.1.0
name: stable
package: limitador-operator
schema: olm.channel
---
image: registry.redhat.io/rhcl-1/limitador-operator-bundle@sha256:1fa81c5cf9b184da51cdf9ff17039e5ca9a0c4d6a40d5a536368219b6b3794a3
name: limitador-operator.v1.0.2
package: limitador-operator
properties:
  - type: olm.gvk
    value:
      group: limitador.kuadrant.io
      kind: Limitador
      version: v1alpha1
  - type: olm.package
    value:
      packageName: limitador-operator
      version: 1.0.2
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "limitador.kuadrant.io/v1alpha1",
              "kind": "Limitador",
              "metadata": {
                "name": "limitador-sample"
              },
              "spec": {
                "limits": [
                  {
                    "conditions": [
                      "get_toy == 'yes'"
                    ],
                    "max_value": 2,
                    "name": "toy_get_route",
                    "namespace": "toystore-app",
                    "seconds": 30,
                    "variables": []
                  }
                ],
                "listener": {
                  "grpc": {
                    "port": 8081
                  },
                  "http": {
                    "port": 8080
                  }
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Integration & Delivery
        containerImage: registry.redhat.io/rhcl-1/limitador-rhel9-operator@sha256:4c6319b592e497f294a96b37914598bfd122bbdbba4568a4ee4550860fa3892c
        createdAt: "2024-10-18T10:24:00Z"
        description: Enables rate limiting for Gateways and applications in a Gateway API network
        features.operators.openshift.io/disconnected: "false"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "false"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        operators.openshift.io/valid-subscription: '["Red Hat Connectivity Link"]'
        operators.operatorframework.io/builder: operator-sdk-v1.32.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/Kuadrant/limitador-operator
        support: kuadrant
        tectonic-visibility: ocs
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: Limitador is the Schema for the limitadors API
            displayName: Limitador
            kind: Limitador
            name: limitadors.limitador.kuadrant.io
            version: v1alpha1
      description: Enables rate limiting for Gateways and applications in a Gateway API network. - Part of Red Hat Connectivity Link
      displayName: Red Hat - Limitador Operator
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - api
        - rate-limit
        - kuadrant
      links:
        - name: GitHub
          url: https://github.com/kuadrant/limitador-operator
        - name: Documentation
          url: https://github.com/Kuadrant/limitador/tree/main/docs
      maintainers:
        - email: eastizle@redhat.com
          name: Eguzki Astiz Lezaun
        - email: asnaps@redhat.com
          name: Alex Snaps
        - email: didier@redhat.com
          name: Didier Di Cesare
      maturity: alpha
      minKubeVersion: 1.25.0
      provider:
        name: Red Hat
        url: https://github.com/Kuadrant/limitador-operator
relatedImages:
  - image: registry.redhat.io/rhcl-1/limitador-rhel9-operator@sha256:4c6319b592e497f294a96b37914598bfd122bbdbba4568a4ee4550860fa3892c
    name: limitador-rhel9-operator-4c6319b592e497f294a96b37914598bfd122bbdbba4568a4ee4550860fa3892c-annotation
  - image: registry.redhat.io/rhcl-1/limitador-rhel9-operator@sha256:4c6319b592e497f294a96b37914598bfd122bbdbba4568a4ee4550860fa3892c
    name: manager
  - image: registry.redhat.io/rhcl-1/limitador-rhel9@sha256:0112e4478abe28486670bb1221b4039ca0b4bde314d72c28485008ea7d6f73c1
    name: limitador
  - image: registry.redhat.io/rhcl-1/limitador-operator-bundle@sha256:1fa81c5cf9b184da51cdf9ff17039e5ca9a0c4d6a40d5a536368219b6b3794a3
    name: ""
schema: olm.bundle
---
image: registry.redhat.io/rhcl-1/limitador-operator-bundle@sha256:4c56cd8462531cf8ba39316a0c6f7493240bfa4a6ace77352fe7ac1597e2fd90
name: limitador-operator.v1.1.0
package: limitador-operator
properties:
  - type: olm.gvk
    value:
      group: limitador.kuadrant.io
      kind: Limitador
      version: v1alpha1
  - type: olm.package
    value:
      packageName: limitador-operator
      version: 1.1.0
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "limitador.kuadrant.io/v1alpha1",
              "kind": "Limitador",
              "metadata": {
                "name": "limitador-sample"
              },
              "spec": {
                "limits": [
                  {
                    "conditions": [
                      "get_toy == 'yes'"
                    ],
                    "max_value": 2,
                    "name": "toy_get_route",
                    "namespace": "toystore-app",
                    "seconds": 30,
                    "variables": []
                  }
                ],
                "listener": {
                  "grpc": {
                    "port": 8081
                  },
                  "http": {
                    "port": 8080
                  }
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Integration & Delivery
        containerImage: registry.redhat.io/rhcl-1/limitador-rhel9-operator@sha256:edb28f112a0d3536f2f52467f38df685d953f46f1999cbd61f4fd4fa4805cd34
        createdAt: "2025-04-07T15:52:04Z"
        description: Enables rate limiting for Gateways and applications in a Gateway API network
        features.operators.openshift.io/disconnected: "false"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "false"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        operators.openshift.io/valid-subscription: '["Red Hat Connectivity Link"]'
        operators.operatorframework.io/builder: operator-sdk-v1.32.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/Kuadrant/limitador-operator
        support: kuadrant
        tectonic-visibility: ocs
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: Limitador is the Schema for the limitadors API
            displayName: Limitador
            kind: Limitador
            name: limitadors.limitador.kuadrant.io
            version: v1alpha1
      description: Enables rate limiting for Gateways and applications in a Gateway API network. - Part of Red Hat Connectivity Link
      displayName: Red Hat - Limitador Operator
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - api
        - rate-limit
        - kuadrant
      links:
        - name: GitHub
          url: https://github.com/kuadrant/limitador-operator
        - name: Documentation
          url: https://github.com/Kuadrant/limitador/tree/main/docs
      maintainers:
        - email: eastizle@redhat.com
          name: Eguzki Astiz Lezaun
        - email: asnaps@redhat.com
          name: Alex Snaps
        - email: didier@redhat.com
          name: Didier Di Cesare
      maturity: alpha
      minKubeVersion: 1.25.0
      provider:
        name: Red Hat
        url: https://github.com/Kuadrant/limitador-operator
relatedImages:
  - image: registry.redhat.io/rhcl-1/limitador-operator-bundle@sha256:4c56cd8462531cf8ba39316a0c6f7493240bfa4a6ace77352fe7ac1597e2fd90
    name: ""
  - image: registry.redhat.io/rhcl-1/limitador-rhel9-operator@sha256:edb28f112a0d3536f2f52467f38df685d953f46f1999cbd61f4fd4fa4805cd34
    name: limitador-rhel9-operator-edb28f112a0d3536f2f52467f38df685d953f46f1999cbd61f4fd4fa4805cd34-annotation
  - image: registry.redhat.io/rhcl-1/limitador-rhel9-operator@sha256:edb28f112a0d3536f2f52467f38df685d953f46f1999cbd61f4fd4fa4805cd34
    name: manager
  - image: registry.redhat.io/rhcl-1/limitador-rhel9@sha256:98f85a05da53fbf7f20845d1969441620407cc13a185fd52714308679f116425
    name: limitador
schema: olm.bundle
---
image: quay.io/redhat-user-workloads/api-management-tenant/rhcl-1-1-limitador-operator-bundle@sha256:93c6f058da352883789f7db0150b1097a5f09e1268e24914ad964d5fdc83f6e1
name: limitador-operator.v1.1.1
package: limitador-operator
properties:
  - type: olm.gvk
    value:
      group: limitador.kuadrant.io
      kind: Limitador
      version: v1alpha1
  - type: olm.package
    value:
      packageName: limitador-operator
      version: 1.1.1
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibGltaXRhZG9yLW9wZXJhdG9yLW1ldHJpY3MtcmVhZGVyIn0sInJ1bGVzIjpbeyJub25SZXNvdXJjZVVSTHMiOlsiL21ldHJpY3MiXSwidmVyYnMiOlsiZ2V0Il19XX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODFcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiA6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogMzc0NWExNmUua3VhZHJhbnQuaW9cbiJ9LCJraW5kIjoiQ29uZmlnTWFwIiwibWV0YWRhdGEiOnsibmFtZSI6ImxpbWl0YWRvci1vcGVyYXRvci1tYW5hZ2VyLWNvbmZpZyJ9fQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibGltaXRhZG9yLW9wZXJhdG9yLW1ldHJpY3MifSwic3BlYyI6eyJwb3J0cyI6W3sibmFtZSI6Im1ldHJpY3MiLCJwb3J0Ijo4MDgwLCJ0YXJnZXRQb3J0IjoibWV0cmljcyJ9XSwic2VsZWN0b3IiOnsiYXBwIjoibGltaXRhZG9yLW9wZXJhdG9yIiwiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
relatedImages:
  - image: quay.io/redhat-user-workloads/api-management-tenant/rhcl-1-1-limitador-operator-bundle@sha256:93c6f058da352883789f7db0150b1097a5f09e1268e24914ad964d5fdc83f6e1
    name: ""
  - image: registry.redhat.io/rhcl-1/limitador-rhel9-operator@sha256:b31ba293812788dc7e21c14703ac61fdd5bff010948ada33715544ba507851f7
    name: ""
  - image: registry.redhat.io/rhcl-1/limitador-rhel9@sha256:9471aadce1a17aacb1bf653b75e0d7924f8f9e144954440e0d9c9be6fd432e8c
    name: limitador
schema: olm.bundle
