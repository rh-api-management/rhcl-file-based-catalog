---
defaultChannel: stable
icon:
  base64data: 
  mediatype: image/png
name: authorino-operator
schema: olm.package
---
entries:
  - name: authorino-operator.v0.16.0
  - name: authorino-operator.v0.16.1
  - name: authorino-operator.v1.0.2
  - name: authorino-operator.v1.1.0
  - name: authorino-operator.v1.1.1
    replaces: authorino-operator.v1.0.2
    skips:
      - authorino-operator.v1.1.0
  - name: authorino-operator.v1.1.2
    replaces: authorino-operator.v1.1.1
  - name: authorino-operator.v1.1.3
  - name: authorino-operator.v1.2.0
  - name: authorino-operator.v1.2.1
    replaces: authorino-operator.v1.1.2
    skips:
      - authorino-operator.v0.16.1
      - authorino-operator.v1.2.0
      - authorino-operator.v0.16.0
  - name: authorino-operator.v1.2.2
    replaces: authorino-operator.v1.2.1
    skips:
      - authorino-operator.v1.1.3
  - name: authorino-operator.v1.2.3
    replaces: authorino-operator.v1.2.2
name: stable
package: authorino-operator
schema: olm.channel
---
entries:
  - name: authorino-operator.v1.0.2
  - name: authorino-operator.v1.1.0
  - name: authorino-operator.v1.1.1
    replaces: authorino-operator.v1.0.2
    skips:
      - authorino-operator.v1.1.0
  - name: authorino-operator.v1.1.2
  - name: authorino-operator.v1.1.3
    replaces: authorino-operator.v1.1.1
    skips:
      - authorino-operator.v1.1.2
name: tech-preview-v1
package: authorino-operator
schema: olm.channel
---
image: registry.redhat.io/rhcl-1/authorino-operator-bundle@sha256:4d2ae2b27473961ad398a9f921e9ab3a63ad1d5b88bedbdd37086bee1005632c
name: authorino-operator.v0.16.0
package: authorino-operator
properties:
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta2
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta3
  - type: olm.gvk
    value:
      group: operator.authorino.kuadrant.io
      kind: Authorino
      version: v1beta1
  - type: olm.package
    value:
      packageName: authorino-operator
      version: 0.16.0
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "authorino.kuadrant.io/v1beta2",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "authorino.kuadrant.io/v1beta3",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "operator.authorino.kuadrant.io/v1beta1",
              "kind": "Authorino",
              "metadata": {
                "name": "authorino-sample"
              },
              "spec": {
                "listener": {
                  "tls": {
                    "enabled": false
                  }
                },
                "oidcServer": {
                  "tls": {
                    "enabled": false
                  }
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Integration & Delivery
        containerImage: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:7306f0614effb508231a76dd1d2ff9d1775bfee8c3fa2d0aafe14d9e59a044ac
        createdAt: "2024-11-21T13:37:42Z"
        description: Enables authentication and authorization for Gateways and applications in a Gateway API network.
        features.operators.openshift.io/disconnected: "false"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "false"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        operators.openshift.io/valid-subscription: '["Red Hat Connectivity Link"]'
        operators.operatorframework.io/builder: operator-sdk-v1.32.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/Kuadrant/authorino-operator
        support: kuadrant
        tectonic-visibility: ocs
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta2
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta3
          - description: API to create instances of authorino
            displayName: Authorino
            kind: Authorino
            name: authorinos.operator.authorino.kuadrant.io
            version: v1beta1
      description: |-
        [Authorino](https://docs.kuadrant.io/authorino/) is Red Hat's Kubernetes-native lightweight external authorization service for tailor-made Zero Trust API security.

        Install this Red Hat official distribution of [Authorino Operator](https://docs.kuadrant.io/authorino-operator/) to manage instances of Authorino in this cluster.

        The current state of this distribution of the operator is: **_Technical Preview_**.

        The Community version of Authorino Operator, based on upstream public images, is available in [OperatorHub.io](https://operatorhub.io/operator/authorino-operator).

        ## Getting started

        After installing the Operator, request an instance of the external authorization service by creating an `Authorino` custom resource.

        **Minimal example (namespaced)**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          listener:
            tls:
              enabled: false
          oidcServer:
            tls:
              enabled: false
        ```

        **Extended example**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          clusterWide: true
          authConfigLabelSelectors: environment=production
          secretLabelSelectors: authorino.kuadrant.io/component=authorino,environment=production

          replicas: 2

          evaluatorCacheSize: 2 # mb

          logLevel: info
          logMode: production

          listener:
            ports:
              grpc: 50001
              http: 5001
            tls:
              certSecretRef:
                name: authorino-server-cert # secret must contain `tls.crt` and `tls.key` entries
            timeout: 2

          oidcServer:
            port: 8083
            tls:
              certSecretRef:
                name: authorino-oidc-server-cert # secret must contain `tls.crt` and `tls.key` entries

          metrics:
            port: 8080
            deep: true

          healthz:
            port: 8081

          tracing:
            endpoint: rpc://otel-collector.observability.svc.cluster.local:4317
            insecure: true

          volumes:
            items:
              - name: keycloak-tls-cert
                mountPath: /etc/ssl/certs
                configMaps:
                  - keycloak-tls-cert
                items: # details to mount the k8s configmap in the authorino pods
                  - key: keycloak.crt
                    path: keycloak.crt
            defaultMode: 420
        ```

        ### Cluster-wide vs Namespaced

        Namespaced instances only watch auth resources (`AuthConfig` and `Secrets`) created in the same namespace as the Authorino service. Use this mode for dedicated instances that do not require elevated privileges.

        Cluster-wide instances watch resources across the entire cluster (all namespaces.) Deploying and running Authorino in this mode requires elevated privileges.

        ### Multi-tenancy

        Use the `authConfigLabelSelectors` field of the `Authorino` custom resource to narrow the scope of the Authorino instance.

        Only `AuthConfig` custom resources whose labels match the value of this field will be handled by the Authorino instance.

        ## Protect a host

        To protect a host, create an `AuthConfig` custom resource for the host. E.g.:

        ```yaml
        apiVersion: authorino.kuadrant.io/v1beta2
        kind: AuthConfig
        metadata:
          name: my-api-protection
        spec:
          hosts:
          - my-api.io

          authentication:
            "keycloak":
              jwt:
                issuerUrl: https://keycloak.keycloak.svc.cluster.local:8080/realms/my-realm

          authorization:
            "k8s-rbac":
              kubernetesSubjectAccessReview:
                user:
                  selector: auth.identity.user.username
                resourceAttributes:
                  resource:
                    value: my-api
                  verb:
                    selector: request.method
              cache:
                key:
                  selector: auth.identity.user.username
                ttl: 30
            "after-2am-only":
              rego: |
                allow {
                  [hour, _, _] := time.clock(time.now_ns())
                  hour >= 2
                }
        ```

        Make sure all requests to the host are fisrt checked with the Authorino instance, by configuring an Envoy proxy for external authz:

        ```yaml
        clusters:
        - name: my-api
          …
        - name: authorino
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: authorino
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: authorino-authorino-authorization
                      port_value: 50051
        listeners:
        - filter_chains:
          - filters:
            name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              use_remote_address: true
              route_config:
                name: my-api-config
                virtual_hosts:
                - name: my-api-vs
                  domains:
                  - my-api.io
                  routes:
                  - match:
                      prefix: /
                    route:
                      cluster: my-api
              http_filters:
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  failure_mode_allow: false
                  include_peer_certificate: true
                  grpc_service:
                    envoy_grpc:
                      cluster_name: authorino
                    timeout: 1s
        ```

        ...or, if using Istio, by creating an [`AuthorizationPolicy`](https://istio.io/latest/docs/reference/config/security/authorization-policy/#AuthorizationPolicy) custom resource. Use `action: CUSTOM` in the resource and the Authorino authorization service configured in the mesh extension provider settings.

        ## Features

        **Authentication**

        * JWT validation (with OpenID Connect Discovery)
        * OAuth 2.0 Token Introspection (opaque tokens)
        * Kubernetes TokenReview (ServiceAccount tokens)
        * API key authentication
        * X.509 client certificate authentication
        * Anonymous access
        * Proxy-handled (authentication performed by the proxy)

        **Authorization**

        * Built-in simple pattern matching (e.g. JWT claims, request attributes checking)
        * OPA policies (inline Rego and fetch from external registry)
        * Kubernetes SubjectAccessReview (resource and non-resource attributes)
        * Authzed SpiceDB

        **External metadata**

        * HTTP request
        * OpenID Connect User Info
        * UMA-protected resource attributes

        **Custom responses**

        * Header injection (Festival Wristbands tokens, JSON, plain text)
        * Envoy Dynamic Metadata
        * Custom HTTP response (status code, headers, messages, body, etc)

        **Callbacks**

        * HTTP webhooks

        **Caching**

        * OpenID Connect and User-Managed Access configs
        * JSON Web Keys (JWKs) and JSON Web Key Sets (JWKS)
        * Access tokens
        * External metadata
        * Precompiled Rego policies
        * Policy evaluation

        Check out the full [Feature Specification](https://docs.kuadrant.io/authorino/docs/features/) and how-to guides in the [Kuadrant Docs](https://docs.kuadrant.io) website.
      displayName: Red Hat - Authorino Operator
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - Authorino
        - Authorino Operator
        - Kuadrant
        - Authorization
        - Authentication
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: GitHub
          url: https://github.com/kuadrant/authorino-operator
        - name: Documentation
          url: https://docs.kuadrant.io/authorino
      maintainers:
        - email: dcesare@redhat.com
          name: Didier Di Cesare
        - email: eastizle@redhat.com
          name: Eguzki Astiz Lezaun
        - email: mcassola@redhat.com
          name: Guilherme Cassolato
      maturity: alpha
      minKubeVersion: 1.25.0
      provider:
        name: Red Hat
relatedImages:
  - image: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:7306f0614effb508231a76dd1d2ff9d1775bfee8c3fa2d0aafe14d9e59a044ac
    name: authorino-rhel9-operator-7306f0614effb508231a76dd1d2ff9d1775bfee8c3fa2d0aafe14d9e59a044ac-annotation
  - image: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:7306f0614effb508231a76dd1d2ff9d1775bfee8c3fa2d0aafe14d9e59a044ac
    name: authorino-operator
  - image: registry.redhat.io/rhcl-1/authorino-rhel9@sha256:7f706051bf98e45f209159ba1033b991e343369dff45276c9efde9de83424b1e
    name: authorino
  - image: registry.redhat.io/rhcl-1/authorino-operator-bundle@sha256:4d2ae2b27473961ad398a9f921e9ab3a63ad1d5b88bedbdd37086bee1005632c
    name: ""
schema: olm.bundle
---
image: registry.redhat.io/rhcl-1/authorino-operator-bundle@sha256:cc4d487b00ffe6013ee6e7fa68c15d3bae8a9605ea632f291b2c604bff76105e
name: authorino-operator.v0.16.1
package: authorino-operator
properties:
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta2
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta3
  - type: olm.gvk
    value:
      group: operator.authorino.kuadrant.io
      kind: Authorino
      version: v1beta1
  - type: olm.package
    value:
      packageName: authorino-operator
      version: 0.16.1
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "authorino.kuadrant.io/v1beta2",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "authorino.kuadrant.io/v1beta3",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "operator.authorino.kuadrant.io/v1beta1",
              "kind": "Authorino",
              "metadata": {
                "name": "authorino-sample"
              },
              "spec": {
                "listener": {
                  "tls": {
                    "enabled": false
                  }
                },
                "oidcServer": {
                  "tls": {
                    "enabled": false
                  }
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Integration & Delivery
        containerImage: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:581d12296e31a2518216b7ffcddbacec178e9adb87d6e4a98561f1aef55522f4
        createdAt: "2024-11-21T13:37:42Z"
        description: Enables authentication and authorization for Gateways and applications in a Gateway API network.
        features.operators.openshift.io/disconnected: "false"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "false"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        operators.openshift.io/valid-subscription: '["Red Hat Connectivity Link"]'
        operators.operatorframework.io/builder: operator-sdk-v1.32.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/Kuadrant/authorino-operator
        support: kuadrant
        tectonic-visibility: ocs
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta2
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta3
          - description: API to create instances of authorino
            displayName: Authorino
            kind: Authorino
            name: authorinos.operator.authorino.kuadrant.io
            version: v1beta1
      description: |-
        [Authorino](https://docs.kuadrant.io/authorino/) is Red Hat's Kubernetes-native lightweight external authorization service for tailor-made Zero Trust API security.

        Install this Red Hat official distribution of [Authorino Operator](https://docs.kuadrant.io/authorino-operator/) to manage instances of Authorino in this cluster.

        The current state of this distribution of the operator is: **Generally Available**.

        The Community version of Authorino Operator, based on upstream public images, is available in [OperatorHub.io](https://operatorhub.io/operator/authorino-operator).

        ## Getting started

        After installing the Operator, request an instance of the external authorization service by creating an `Authorino` custom resource.

        **Minimal example (namespaced)**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          listener:
            tls:
              enabled: false
          oidcServer:
            tls:
              enabled: false
        ```

        **Extended example**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          clusterWide: true
          authConfigLabelSelectors: environment=production
          secretLabelSelectors: authorino.kuadrant.io/component=authorino,environment=production

          replicas: 2

          evaluatorCacheSize: 2 # mb

          logLevel: info
          logMode: production

          listener:
            ports:
              grpc: 50001
              http: 5001
            tls:
              certSecretRef:
                name: authorino-server-cert # secret must contain `tls.crt` and `tls.key` entries
            timeout: 2

          oidcServer:
            port: 8083
            tls:
              certSecretRef:
                name: authorino-oidc-server-cert # secret must contain `tls.crt` and `tls.key` entries

          metrics:
            port: 8080
            deep: true

          healthz:
            port: 8081

          tracing:
            endpoint: rpc://otel-collector.observability.svc.cluster.local:4317
            insecure: true

          volumes:
            items:
              - name: keycloak-tls-cert
                mountPath: /etc/ssl/certs
                configMaps:
                  - keycloak-tls-cert
                items: # details to mount the k8s configmap in the authorino pods
                  - key: keycloak.crt
                    path: keycloak.crt
            defaultMode: 420
        ```

        ### Cluster-wide vs Namespaced

        Namespaced instances only watch auth resources (`AuthConfig` and `Secrets`) created in the same namespace as the Authorino service. Use this mode for dedicated instances that do not require elevated privileges.

        Cluster-wide instances watch resources across the entire cluster (all namespaces.) Deploying and running Authorino in this mode requires elevated privileges.

        ### Multi-tenancy

        Use the `authConfigLabelSelectors` field of the `Authorino` custom resource to narrow the scope of the Authorino instance.

        Only `AuthConfig` custom resources whose labels match the value of this field will be handled by the Authorino instance.

        ## Protect a host

        To protect a host, create an `AuthConfig` custom resource for the host. E.g.:

        ```yaml
        apiVersion: authorino.kuadrant.io/v1beta3
        kind: AuthConfig
        metadata:
          name: my-api-protection
        spec:
          hosts:
          - my-api.io

          authentication:
            "keycloak":
              jwt:
                issuerUrl: https://keycloak.keycloak.svc.cluster.local:8080/realms/my-realm

          authorization:
            "k8s-rbac":
              kubernetesSubjectAccessReview:
                user:
                  selector: auth.identity.user.username
                resourceAttributes:
                  resource:
                    value: my-api
                  verb:
                    selector: request.method
              cache:
                key:
                  selector: auth.identity.user.username
                ttl: 30
            "after-2am-only":
              rego: |
                allow {
                  [hour, _, _] := time.clock(time.now_ns())
                  hour >= 2
                }
        ```

        Make sure all requests to the host are fisrt checked with the Authorino instance, by configuring an Envoy proxy for external authz:

        ```yaml
        clusters:
        - name: my-api
          …
        - name: authorino
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: authorino
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: authorino-authorino-authorization
                      port_value: 50051
        listeners:
        - filter_chains:
          - filters:
            name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              use_remote_address: true
              route_config:
                name: my-api-config
                virtual_hosts:
                - name: my-api-vs
                  domains:
                  - my-api.io
                  routes:
                  - match:
                      prefix: /
                    route:
                      cluster: my-api
              http_filters:
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  failure_mode_allow: false
                  include_peer_certificate: true
                  grpc_service:
                    envoy_grpc:
                      cluster_name: authorino
                    timeout: 1s
        ```

        ...or, if using Istio, by creating an [`AuthorizationPolicy`](https://istio.io/latest/docs/reference/config/security/authorization-policy/#AuthorizationPolicy) custom resource. Use `action: CUSTOM` in the resource and the Authorino authorization service configured in the mesh extension provider settings.

        ## Features

        **Authentication**

        * JWT validation (with OpenID Connect Discovery)
        * OAuth 2.0 Token Introspection (opaque tokens)
        * Kubernetes TokenReview (ServiceAccount tokens)
        * API key authentication
        * X.509 client certificate authentication
        * Anonymous access
        * Proxy-handled (authentication performed by the proxy)

        **Authorization**

        * Built-in simple pattern matching (e.g. JWT claims, request attributes checking)
        * OPA policies (inline Rego and fetch from external registry)
        * Kubernetes SubjectAccessReview (resource and non-resource attributes)
        * Authzed SpiceDB

        **External metadata**

        * HTTP request
        * OpenID Connect User Info
        * UMA-protected resource attributes

        **Custom responses**

        * Header injection (Festival Wristbands tokens, JSON, plain text)
        * Envoy Dynamic Metadata
        * Custom HTTP response (status code, headers, messages, body, etc)

        **Callbacks**

        * HTTP webhooks

        **Caching**

        * OpenID Connect and User-Managed Access configs
        * JSON Web Keys (JWKs) and JSON Web Key Sets (JWKS)
        * Access tokens
        * External metadata
        * Precompiled Rego policies
        * Policy evaluation

        Check out the full [Feature Specification](https://docs.kuadrant.io/authorino/docs/features/) and how-to guides in the [Kuadrant Docs](https://docs.kuadrant.io) website.
      displayName: Red Hat - Authorino Operator
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - Authorino
        - Authorino Operator
        - Kuadrant
        - Authorization
        - Authentication
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: GitHub
          url: https://github.com/kuadrant/authorino-operator
        - name: Documentation
          url: https://docs.kuadrant.io/authorino
      maintainers:
        - email: dcesare@redhat.com
          name: Didier Di Cesare
        - email: eastizle@redhat.com
          name: Eguzki Astiz Lezaun
        - email: mcassola@redhat.com
          name: Guilherme Cassolato
      maturity: alpha
      minKubeVersion: 1.25.0
      provider:
        name: Red Hat
relatedImages:
  - image: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:581d12296e31a2518216b7ffcddbacec178e9adb87d6e4a98561f1aef55522f4
    name: authorino-rhel9-operator-581d12296e31a2518216b7ffcddbacec178e9adb87d6e4a98561f1aef55522f4-annotation
  - image: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:581d12296e31a2518216b7ffcddbacec178e9adb87d6e4a98561f1aef55522f4
    name: authorino-operator
  - image: registry.redhat.io/rhcl-1/authorino-rhel9@sha256:3962953f6473609ddf78800555920f2ad3461cd44e3756c30a543e7184df829e
    name: authorino
  - image: registry.redhat.io/rhcl-1/authorino-operator-bundle@sha256:cc4d487b00ffe6013ee6e7fa68c15d3bae8a9605ea632f291b2c604bff76105e
    name: ""
schema: olm.bundle
---
image: registry.redhat.io/3scale-tech-preview/authorino-operator-bundle@sha256:ade1e993e7b4243cc39a678ad36654aad06776b47c1edc776f00d3524ff4c129
name: authorino-operator.v1.0.2
package: authorino-operator
properties:
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta1
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta2
  - type: olm.gvk
    value:
      group: operator.authorino.kuadrant.io
      kind: Authorino
      version: v1beta1
  - type: olm.package
    value:
      packageName: authorino-operator
      version: 1.0.2
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "authorino.kuadrant.io/v1beta1",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "hosts": [
                  "my-api.io"
                ],
                "identity": [
                  {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "in": "authorization_header",
                      "keySelector": "APIKEY"
                    },
                    "name": "api-key-users"
                  }
                ]
              }
            },
            {
              "apiVersion": "authorino.kuadrant.io/v1beta2",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "operator.authorino.kuadrant.io/v1beta1",
              "kind": "Authorino",
              "metadata": {
                "name": "authorino-sample"
              },
              "spec": {
                "listener": {
                  "tls": {
                    "enabled": false
                  }
                },
                "oidcServer": {
                  "tls": {
                    "enabled": false
                  }
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Integration & Delivery
        containerImage: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:df96e91657c292de4f7bde8e3331260a6e8329995d42e28851787d6a674a05b1
        createdAt: 2021-12-08T10-00-00Z
        description: Authorino
        features.operators.openshift.io/disconnected: "false"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "false"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        operators.openshift.io/valid-subscription: '["Red Hat Integration", "Red Hat 3scale API Management"]'
        operators.operatorframework.io/builder: operator-sdk-v1.22.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/Kuadrant/authorino-operator
        support: kuadrant
        tectonic-visibility: ocs
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta1
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta2
          - description: API to create instances of authorino
            displayName: Authorino
            kind: Authorino
            name: authorinos.operator.authorino.kuadrant.io
            version: v1beta1
      description: |-
        [Authorino](https://docs.kuadrant.io/authorino/) is Red Hat's Kubernetes-native lightweight external authorization service for tailor-made Zero Trust API security.

        Install this Red Hat official distribution of [Authorino Operator](https://docs.kuadrant.io/authorino-operator/) to manage instances of Authorino in this cluster.

        The current state of this distribution of the operator is: **_Technical Preview_**.

        The Community version of Authorino Operator, based on upstream public images, is available in [OperatorHub.io](https://operatorhub.io/operator/authorino-operator).

        ## Getting started

        After installing the Operator, request an instance of the external authorization service by creating an `Authorino` custom resource.

        **Minimal example (namespaced)**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          listener:
            tls:
              enabled: false
          oidcServer:
            tls:
              enabled: false
        ```

        **Extended example**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          clusterWide: true
          authConfigLabelSelectors: environment=production
          secretLabelSelectors: authorino.kuadrant.io/component=authorino,environment=production

          replicas: 2

          evaluatorCacheSize: 2 # mb

          logLevel: info
          logMode: production

          listener:
            ports:
              grpc: 50001
              http: 5001
            tls:
              certSecretRef:
                name: authorino-server-cert # secret must contain `tls.crt` and `tls.key` entries
            timeout: 2

          oidcServer:
            port: 8083
            tls:
              certSecretRef:
                name: authorino-oidc-server-cert # secret must contain `tls.crt` and `tls.key` entries

          metrics:
            port: 8080
            deep: true

          healthz:
            port: 8081

          tracing:
            endpoint: rpc://otel-collector.observability.svc.cluster.local:4317
            insecure: true

          volumes:
            items:
              - name: keycloak-tls-cert
                mountPath: /etc/ssl/certs
                configMaps:
                  - keycloak-tls-cert
                items: # details to mount the k8s configmap in the authorino pods
                  - key: keycloak.crt
                    path: keycloak.crt
            defaultMode: 420
        ```

        ### Cluster-wide vs Namespaced

        Namespaced instances only watch auth resources (`AuthConfig` and `Secrets`) created in the same namespace as the Authorino service. Use this mode for dedicated instances that do not require elevated privileges.

        Cluster-wide instances watch resources across the entire cluster (all namespaces.) Deploying and running Authorino in this mode requires elevated privileges.

        ### Multi-tenancy

        Use the `authConfigLabelSelectors` field of the `Authorino` custom resource to narrow the scope of the Authorino instance.

        Only `AuthConfig` custom resources whose labels match the value of this field will be handled by the Authorino instance.

        ## Protect a host

        To protect a host, create an `AuthConfig` custom resource for the host. E.g.:

        ```yaml
        apiVersion: authorino.kuadrant.io/v1beta2
        kind: AuthConfig
        metadata:
          name: my-api-protection
        spec:
          hosts:
          - my-api.io

          authentication:
            "keycloak":
              jwt:
                issuerUrl: https://keycloak.keycloak.svc.cluster.local:8080/realms/my-realm

          authorization:
            "k8s-rbac":
              kubernetesSubjectAccessReview:
                user:
                  selector: auth.identity.user.username
                resourceAttributes:
                  resource:
                    value: my-api
                  verb:
                    selector: request.method
              cache:
                key:
                  selector: auth.identity.user.username
                ttl: 30
            "after-2am-only":
              rego: |
                allow {
                  [hour, _, _] := time.clock(time.now_ns())
                  hour >= 2
                }
        ```

        Make sure all requests to the host are fisrt checked with the Authorino instance, by configuring an Envoy proxy for external authz:

        ```yaml
        clusters:
        - name: my-api
          …
        - name: authorino
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: authorino
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: authorino-authorino-authorization
                      port_value: 50051
        listeners:
        - filter_chains:
          - filters:
            name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              use_remote_address: true
              route_config:
                name: my-api-config
                virtual_hosts:
                - name: my-api-vs
                  domains:
                  - my-api.io
                  routes:
                  - match:
                      prefix: /
                    route:
                      cluster: my-api
              http_filters:
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  failure_mode_allow: false
                  include_peer_certificate: true
                  grpc_service:
                    envoy_grpc:
                      cluster_name: authorino
                    timeout: 1s
        ```

        ...or, if using Istio, by creating an [`AuthorizationPolicy`](https://istio.io/latest/docs/reference/config/security/authorization-policy/#AuthorizationPolicy) custom resource. Use `action: CUSTOM` in the resource and the Authorino authorization service configured in the mesh extension provider settings.

        ## Features

        **Authentication**

        * JWT validation (with OpenID Connect Discovery)
        * OAuth 2.0 Token Introspection (opaque tokens)
        * Kubernetes TokenReview (ServiceAccount tokens)
        * API key authentication
        * X.509 client certificate authentication
        * Anonymous access
        * Proxy-handled (authentication performed by the proxy)

        **Authorization**

        * Built-in simple pattern matching (e.g. JWT claims, request attributes checking)
        * OPA policies (inline Rego and fetch from external registry)
        * Kubernetes SubjectAccessReview (resource and non-resource attributes)
        * Authzed SpiceDB

        **External metadata**

        * HTTP request
        * OpenID Connect User Info
        * UMA-protected resource attributes

        **Custom responses**

        * Header injection (Festival Wristbands tokens, JSON, plain text)
        * Envoy Dynamic Metadata
        * Custom HTTP response (status code, headers, messages, body, etc)

        **Callbacks**

        * HTTP webhooks

        **Caching**

        * OpenID Connect and User-Managed Access configs
        * JSON Web Keys (JWKs) and JSON Web Key Sets (JWKS)
        * Access tokens
        * External metadata
        * Precompiled Rego policies
        * Policy evaluation

        Check out the full [Feature Specification](https://docs.kuadrant.io/authorino/docs/features/) and how-to guides in the [Kuadrant Docs](https://docs.kuadrant.io) website.
      displayName: Red Hat - Authorino (Technical Preview)
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - Authorino
        - Authorino Operator
        - Kuadrant
        - Authorization
        - Authentication
      links:
        - name: GitHub
          url: https://github.com/kuadrant/authorino-operator
        - name: Documentation
          url: https://docs.kuadrant.io/authorino
      maintainers:
        - email: dcesare@redhat.com
          name: Didier Di Cesare
        - email: eastizle@redhat.com
          name: Eguzki Astiz Lezaun
        - email: mcassola@redhat.com
          name: Guilherme Cassolato
      maturity: alpha
      minKubeVersion: 1.8.0
      provider:
        name: Red Hat
relatedImages:
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:df96e91657c292de4f7bde8e3331260a6e8329995d42e28851787d6a674a05b1
    name: authorino-rhel9-operator-df96e91657c292de4f7bde8e3331260a6e8329995d42e28851787d6a674a05b1-annotation
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:df96e91657c292de4f7bde8e3331260a6e8329995d42e28851787d6a674a05b1
    name: manager
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9@sha256:27ab4042161278eb5ea71d1b2f7d7705cacd817dc7469f7032fce13e560c40c6
    name: webhooks
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9@sha256:27ab4042161278eb5ea71d1b2f7d7705cacd817dc7469f7032fce13e560c40c6
    name: authorino
  - image: registry.redhat.io/3scale-tech-preview/authorino-operator-bundle@sha256:ade1e993e7b4243cc39a678ad36654aad06776b47c1edc776f00d3524ff4c129
    name: ""
schema: olm.bundle
---
image: registry.redhat.io/3scale-tech-preview/authorino-operator-bundle@sha256:fa929a75fa0c1a52320d7aea77d03db4362c629f5cccd6eea2242fc782e27600
name: authorino-operator.v1.1.0
package: authorino-operator
properties:
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta1
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta2
  - type: olm.gvk
    value:
      group: operator.authorino.kuadrant.io
      kind: Authorino
      version: v1beta1
  - type: olm.package
    value:
      packageName: authorino-operator
      version: 1.1.0
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "authorino.kuadrant.io/v1beta1",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "hosts": [
                  "my-api.io"
                ],
                "identity": [
                  {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "in": "authorization_header",
                      "keySelector": "APIKEY"
                    },
                    "name": "api-key-users"
                  }
                ]
              }
            },
            {
              "apiVersion": "authorino.kuadrant.io/v1beta2",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "operator.authorino.kuadrant.io/v1beta1",
              "kind": "Authorino",
              "metadata": {
                "name": "authorino-sample"
              },
              "spec": {
                "listener": {
                  "tls": {
                    "enabled": false
                  }
                },
                "oidcServer": {
                  "tls": {
                    "enabled": false
                  }
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Integration & Delivery
        containerImage: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:48f8bb245f2c912cff8ac08af5862d6df68be5d198e26d488546cb997276dd93
        createdAt: "2024-11-08T11:06:33Z"
        description: Authorino
        features.operators.openshift.io/disconnected: "false"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "false"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        operators.openshift.io/valid-subscription: '["Red Hat Integration", "Red Hat 3scale API Management"]'
        operators.operatorframework.io/builder: operator-sdk-v1.32.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/Kuadrant/authorino-operator
        support: kuadrant
        tectonic-visibility: ocs
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta1
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta2
          - description: API to create instances of authorino
            displayName: Authorino
            kind: Authorino
            name: authorinos.operator.authorino.kuadrant.io
            version: v1beta1
      description: |-
        [Authorino](https://docs.kuadrant.io/authorino/) is Red Hat's Kubernetes-native lightweight external authorization service for tailor-made Zero Trust API security.

        Install this Red Hat official distribution of [Authorino Operator](https://docs.kuadrant.io/authorino-operator/) to manage instances of Authorino in this cluster.

        The current state of this distribution of the operator is: **_Technical Preview_**.

        The Community version of Authorino Operator, based on upstream public images, is available in [OperatorHub.io](https://operatorhub.io/operator/authorino-operator).

        ## Getting started

        After installing the Operator, request an instance of the external authorization service by creating an `Authorino` custom resource.

        **Minimal example (namespaced)**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          listener:
            tls:
              enabled: false
          oidcServer:
            tls:
              enabled: false
        ```

        **Extended example**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          clusterWide: true
          authConfigLabelSelectors: environment=production
          secretLabelSelectors: authorino.kuadrant.io/component=authorino,environment=production

          replicas: 2

          evaluatorCacheSize: 2 # mb

          logLevel: info
          logMode: production

          listener:
            ports:
              grpc: 50001
              http: 5001
            tls:
              certSecretRef:
                name: authorino-server-cert # secret must contain `tls.crt` and `tls.key` entries
            timeout: 2

          oidcServer:
            port: 8083
            tls:
              certSecretRef:
                name: authorino-oidc-server-cert # secret must contain `tls.crt` and `tls.key` entries

          metrics:
            port: 8080
            deep: true

          healthz:
            port: 8081

          tracing:
            endpoint: rpc://otel-collector.observability.svc.cluster.local:4317
            insecure: true

          volumes:
            items:
              - name: keycloak-tls-cert
                mountPath: /etc/ssl/certs
                configMaps:
                  - keycloak-tls-cert
                items: # details to mount the k8s configmap in the authorino pods
                  - key: keycloak.crt
                    path: keycloak.crt
            defaultMode: 420
        ```

        ### Cluster-wide vs Namespaced

        Namespaced instances only watch auth resources (`AuthConfig` and `Secrets`) created in the same namespace as the Authorino service. Use this mode for dedicated instances that do not require elevated privileges.

        Cluster-wide instances watch resources across the entire cluster (all namespaces.) Deploying and running Authorino in this mode requires elevated privileges.

        ### Multi-tenancy

        Use the `authConfigLabelSelectors` field of the `Authorino` custom resource to narrow the scope of the Authorino instance.

        Only `AuthConfig` custom resources whose labels match the value of this field will be handled by the Authorino instance.

        ## Protect a host

        To protect a host, create an `AuthConfig` custom resource for the host. E.g.:

        ```yaml
        apiVersion: authorino.kuadrant.io/v1beta2
        kind: AuthConfig
        metadata:
          name: my-api-protection
        spec:
          hosts:
          - my-api.io

          authentication:
            "keycloak":
              jwt:
                issuerUrl: https://keycloak.keycloak.svc.cluster.local:8080/realms/my-realm

          authorization:
            "k8s-rbac":
              kubernetesSubjectAccessReview:
                user:
                  selector: auth.identity.user.username
                resourceAttributes:
                  resource:
                    value: my-api
                  verb:
                    selector: request.method
              cache:
                key:
                  selector: auth.identity.user.username
                ttl: 30
            "after-2am-only":
              rego: |
                allow {
                  [hour, _, _] := time.clock(time.now_ns())
                  hour >= 2
                }
        ```

        Make sure all requests to the host are fisrt checked with the Authorino instance, by configuring an Envoy proxy for external authz:

        ```yaml
        clusters:
        - name: my-api
          …
        - name: authorino
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: authorino
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: authorino-authorino-authorization
                      port_value: 50051
        listeners:
        - filter_chains:
          - filters:
            name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              use_remote_address: true
              route_config:
                name: my-api-config
                virtual_hosts:
                - name: my-api-vs
                  domains:
                  - my-api.io
                  routes:
                  - match:
                      prefix: /
                    route:
                      cluster: my-api
              http_filters:
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  failure_mode_allow: false
                  include_peer_certificate: true
                  grpc_service:
                    envoy_grpc:
                      cluster_name: authorino
                    timeout: 1s
        ```

        ...or, if using Istio, by creating an [`AuthorizationPolicy`](https://istio.io/latest/docs/reference/config/security/authorization-policy/#AuthorizationPolicy) custom resource. Use `action: CUSTOM` in the resource and the Authorino authorization service configured in the mesh extension provider settings.

        ## Features

        **Authentication**

        * JWT validation (with OpenID Connect Discovery)
        * OAuth 2.0 Token Introspection (opaque tokens)
        * Kubernetes TokenReview (ServiceAccount tokens)
        * API key authentication
        * X.509 client certificate authentication
        * Anonymous access
        * Proxy-handled (authentication performed by the proxy)

        **Authorization**

        * Built-in simple pattern matching (e.g. JWT claims, request attributes checking)
        * OPA policies (inline Rego and fetch from external registry)
        * Kubernetes SubjectAccessReview (resource and non-resource attributes)
        * Authzed SpiceDB

        **External metadata**

        * HTTP request
        * OpenID Connect User Info
        * UMA-protected resource attributes

        **Custom responses**

        * Header injection (Festival Wristbands tokens, JSON, plain text)
        * Envoy Dynamic Metadata
        * Custom HTTP response (status code, headers, messages, body, etc)

        **Callbacks**

        * HTTP webhooks

        **Caching**

        * OpenID Connect and User-Managed Access configs
        * JSON Web Keys (JWKs) and JSON Web Key Sets (JWKS)
        * Access tokens
        * External metadata
        * Precompiled Rego policies
        * Policy evaluation

        Check out the full [Feature Specification](https://docs.kuadrant.io/authorino/docs/features/) and how-to guides in the [Kuadrant Docs](https://docs.kuadrant.io) website.
      displayName: Red Hat - Authorino (Technical Preview)
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - Authorino
        - Authorino Operator
        - Kuadrant
        - Authorization
        - Authentication
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: GitHub
          url: https://github.com/kuadrant/authorino-operator
        - name: Documentation
          url: https://docs.kuadrant.io/authorino
      maintainers:
        - email: dcesare@redhat.com
          name: Didier Di Cesare
        - email: eastizle@redhat.com
          name: Eguzki Astiz Lezaun
        - email: mcassola@redhat.com
          name: Guilherme Cassolato
      maturity: alpha
      minKubeVersion: 1.25.0
      provider:
        name: Red Hat
relatedImages:
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:48f8bb245f2c912cff8ac08af5862d6df68be5d198e26d488546cb997276dd93
    name: authorino-rhel9-operator-48f8bb245f2c912cff8ac08af5862d6df68be5d198e26d488546cb997276dd93-annotation
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:48f8bb245f2c912cff8ac08af5862d6df68be5d198e26d488546cb997276dd93
    name: manager
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9@sha256:26ec6d4579f4dd746f5e898b8f086963849b98c704a7a7f8b4dc7517cf0c7003
    name: webhooks
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9@sha256:26ec6d4579f4dd746f5e898b8f086963849b98c704a7a7f8b4dc7517cf0c7003
    name: authorino
  - image: registry.redhat.io/3scale-tech-preview/authorino-operator-bundle@sha256:fa929a75fa0c1a52320d7aea77d03db4362c629f5cccd6eea2242fc782e27600
    name: ""
schema: olm.bundle
---
image: registry.redhat.io/3scale-tech-preview/authorino-operator-bundle@sha256:75ef745eee540a43a00c49107c5cc9ed51c03ae1c5554de51ee798f1ac7d55f0
name: authorino-operator.v1.1.1
package: authorino-operator
properties:
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta1
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta2
  - type: olm.gvk
    value:
      group: operator.authorino.kuadrant.io
      kind: Authorino
      version: v1beta1
  - type: olm.package
    value:
      packageName: authorino-operator
      version: 1.1.1
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "authorino.kuadrant.io/v1beta1",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "hosts": [
                  "my-api.io"
                ],
                "identity": [
                  {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "in": "authorization_header",
                      "keySelector": "APIKEY"
                    },
                    "name": "api-key-users"
                  }
                ]
              }
            },
            {
              "apiVersion": "authorino.kuadrant.io/v1beta2",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "operator.authorino.kuadrant.io/v1beta1",
              "kind": "Authorino",
              "metadata": {
                "name": "authorino-sample"
              },
              "spec": {
                "listener": {
                  "tls": {
                    "enabled": false
                  }
                },
                "oidcServer": {
                  "tls": {
                    "enabled": false
                  }
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Integration & Delivery
        containerImage: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:94b514558b028f314c417ede8c22fb0d79c98fb8d7728f83a4c094309bee8a8d
        createdAt: "2024-11-08T11:06:33Z"
        description: Authorino
        features.operators.openshift.io/disconnected: "false"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "false"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        operators.openshift.io/valid-subscription: '["Red Hat Integration", "Red Hat 3scale API Management"]'
        operators.operatorframework.io/builder: operator-sdk-v1.32.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/Kuadrant/authorino-operator
        support: kuadrant
        tectonic-visibility: ocs
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta1
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta2
          - description: API to create instances of authorino
            displayName: Authorino
            kind: Authorino
            name: authorinos.operator.authorino.kuadrant.io
            version: v1beta1
      description: |-
        [Authorino](https://docs.kuadrant.io/authorino/) is Red Hat's Kubernetes-native lightweight external authorization service for tailor-made Zero Trust API security.

        Install this Red Hat official distribution of [Authorino Operator](https://docs.kuadrant.io/authorino-operator/) to manage instances of Authorino in this cluster.

        The current state of this distribution of the operator is: **_Technical Preview_**.

        The Community version of Authorino Operator, based on upstream public images, is available in [OperatorHub.io](https://operatorhub.io/operator/authorino-operator).

        ## Getting started

        After installing the Operator, request an instance of the external authorization service by creating an `Authorino` custom resource.

        **Minimal example (namespaced)**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          listener:
            tls:
              enabled: false
          oidcServer:
            tls:
              enabled: false
        ```

        **Extended example**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          clusterWide: true
          authConfigLabelSelectors: environment=production
          secretLabelSelectors: authorino.kuadrant.io/component=authorino,environment=production

          replicas: 2

          evaluatorCacheSize: 2 # mb

          logLevel: info
          logMode: production

          listener:
            ports:
              grpc: 50001
              http: 5001
            tls:
              certSecretRef:
                name: authorino-server-cert # secret must contain `tls.crt` and `tls.key` entries
            timeout: 2

          oidcServer:
            port: 8083
            tls:
              certSecretRef:
                name: authorino-oidc-server-cert # secret must contain `tls.crt` and `tls.key` entries

          metrics:
            port: 8080
            deep: true

          healthz:
            port: 8081

          tracing:
            endpoint: rpc://otel-collector.observability.svc.cluster.local:4317
            insecure: true

          volumes:
            items:
              - name: keycloak-tls-cert
                mountPath: /etc/ssl/certs
                configMaps:
                  - keycloak-tls-cert
                items: # details to mount the k8s configmap in the authorino pods
                  - key: keycloak.crt
                    path: keycloak.crt
            defaultMode: 420
        ```

        ### Cluster-wide vs Namespaced

        Namespaced instances only watch auth resources (`AuthConfig` and `Secrets`) created in the same namespace as the Authorino service. Use this mode for dedicated instances that do not require elevated privileges.

        Cluster-wide instances watch resources across the entire cluster (all namespaces.) Deploying and running Authorino in this mode requires elevated privileges.

        ### Multi-tenancy

        Use the `authConfigLabelSelectors` field of the `Authorino` custom resource to narrow the scope of the Authorino instance.

        Only `AuthConfig` custom resources whose labels match the value of this field will be handled by the Authorino instance.

        ## Protect a host

        To protect a host, create an `AuthConfig` custom resource for the host. E.g.:

        ```yaml
        apiVersion: authorino.kuadrant.io/v1beta2
        kind: AuthConfig
        metadata:
          name: my-api-protection
        spec:
          hosts:
          - my-api.io

          authentication:
            "keycloak":
              jwt:
                issuerUrl: https://keycloak.keycloak.svc.cluster.local:8080/realms/my-realm

          authorization:
            "k8s-rbac":
              kubernetesSubjectAccessReview:
                user:
                  selector: auth.identity.user.username
                resourceAttributes:
                  resource:
                    value: my-api
                  verb:
                    selector: request.method
              cache:
                key:
                  selector: auth.identity.user.username
                ttl: 30
            "after-2am-only":
              rego: |
                allow {
                  [hour, _, _] := time.clock(time.now_ns())
                  hour >= 2
                }
        ```

        Make sure all requests to the host are fisrt checked with the Authorino instance, by configuring an Envoy proxy for external authz:

        ```yaml
        clusters:
        - name: my-api
          …
        - name: authorino
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: authorino
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: authorino-authorino-authorization
                      port_value: 50051
        listeners:
        - filter_chains:
          - filters:
            name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              use_remote_address: true
              route_config:
                name: my-api-config
                virtual_hosts:
                - name: my-api-vs
                  domains:
                  - my-api.io
                  routes:
                  - match:
                      prefix: /
                    route:
                      cluster: my-api
              http_filters:
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  failure_mode_allow: false
                  include_peer_certificate: true
                  grpc_service:
                    envoy_grpc:
                      cluster_name: authorino
                    timeout: 1s
        ```

        ...or, if using Istio, by creating an [`AuthorizationPolicy`](https://istio.io/latest/docs/reference/config/security/authorization-policy/#AuthorizationPolicy) custom resource. Use `action: CUSTOM` in the resource and the Authorino authorization service configured in the mesh extension provider settings.

        ## Features

        **Authentication**

        * JWT validation (with OpenID Connect Discovery)
        * OAuth 2.0 Token Introspection (opaque tokens)
        * Kubernetes TokenReview (ServiceAccount tokens)
        * API key authentication
        * X.509 client certificate authentication
        * Anonymous access
        * Proxy-handled (authentication performed by the proxy)

        **Authorization**

        * Built-in simple pattern matching (e.g. JWT claims, request attributes checking)
        * OPA policies (inline Rego and fetch from external registry)
        * Kubernetes SubjectAccessReview (resource and non-resource attributes)
        * Authzed SpiceDB

        **External metadata**

        * HTTP request
        * OpenID Connect User Info
        * UMA-protected resource attributes

        **Custom responses**

        * Header injection (Festival Wristbands tokens, JSON, plain text)
        * Envoy Dynamic Metadata
        * Custom HTTP response (status code, headers, messages, body, etc)

        **Callbacks**

        * HTTP webhooks

        **Caching**

        * OpenID Connect and User-Managed Access configs
        * JSON Web Keys (JWKs) and JSON Web Key Sets (JWKS)
        * Access tokens
        * External metadata
        * Precompiled Rego policies
        * Policy evaluation

        Check out the full [Feature Specification](https://docs.kuadrant.io/authorino/docs/features/) and how-to guides in the [Kuadrant Docs](https://docs.kuadrant.io) website.
      displayName: Red Hat - Authorino (Technical Preview)
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - Authorino
        - Authorino Operator
        - Kuadrant
        - Authorization
        - Authentication
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: GitHub
          url: https://github.com/kuadrant/authorino-operator
        - name: Documentation
          url: https://docs.kuadrant.io/authorino
      maintainers:
        - email: dcesare@redhat.com
          name: Didier Di Cesare
        - email: eastizle@redhat.com
          name: Eguzki Astiz Lezaun
        - email: mcassola@redhat.com
          name: Guilherme Cassolato
      maturity: alpha
      minKubeVersion: 1.25.0
      provider:
        name: Red Hat
relatedImages:
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:94b514558b028f314c417ede8c22fb0d79c98fb8d7728f83a4c094309bee8a8d
    name: authorino-rhel9-operator-94b514558b028f314c417ede8c22fb0d79c98fb8d7728f83a4c094309bee8a8d-annotation
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:94b514558b028f314c417ede8c22fb0d79c98fb8d7728f83a4c094309bee8a8d
    name: manager
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9@sha256:3614034c1462c776ae49ef90b90f8f15631511c514297338107c6f5718f519aa
    name: webhooks
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9@sha256:3614034c1462c776ae49ef90b90f8f15631511c514297338107c6f5718f519aa
    name: authorino
  - image: registry.redhat.io/3scale-tech-preview/authorino-operator-bundle@sha256:75ef745eee540a43a00c49107c5cc9ed51c03ae1c5554de51ee798f1ac7d55f0
    name: ""
schema: olm.bundle
---
image: registry.redhat.io/3scale-tech-preview/authorino-operator-bundle@sha256:f1a2c63a9903c2dbf9b3bf1b3e200f85258d8d6f6518d9e48756126d8f37653c
name: authorino-operator.v1.1.2
package: authorino-operator
properties:
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta1
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta2
  - type: olm.gvk
    value:
      group: operator.authorino.kuadrant.io
      kind: Authorino
      version: v1beta1
  - type: olm.package
    value:
      packageName: authorino-operator
      version: 1.1.2
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "authorino.kuadrant.io/v1beta1",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "hosts": [
                  "my-api.io"
                ],
                "identity": [
                  {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "in": "authorization_header",
                      "keySelector": "APIKEY"
                    },
                    "name": "api-key-users"
                  }
                ]
              }
            },
            {
              "apiVersion": "authorino.kuadrant.io/v1beta2",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "operator.authorino.kuadrant.io/v1beta1",
              "kind": "Authorino",
              "metadata": {
                "name": "authorino-sample"
              },
              "spec": {
                "listener": {
                  "tls": {
                    "enabled": false
                  }
                },
                "oidcServer": {
                  "tls": {
                    "enabled": false
                  }
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Integration & Delivery
        containerImage: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:54f49eb217d888ac48882e3b333aeafa463f3cc9832050e29e17ec2116599690
        createdAt: "2024-11-08T11:06:33Z"
        description: Authorino
        features.operators.openshift.io/disconnected: "false"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "false"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        operators.openshift.io/valid-subscription: '["Red Hat Integration", "Red Hat 3scale API Management"]'
        operators.operatorframework.io/builder: operator-sdk-v1.32.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/Kuadrant/authorino-operator
        support: kuadrant
        tectonic-visibility: ocs
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta1
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta2
          - description: API to create instances of authorino
            displayName: Authorino
            kind: Authorino
            name: authorinos.operator.authorino.kuadrant.io
            version: v1beta1
      description: |-
        [Authorino](https://docs.kuadrant.io/authorino/) is Red Hat's Kubernetes-native lightweight external authorization service for tailor-made Zero Trust API security.

        Install this Red Hat official distribution of [Authorino Operator](https://docs.kuadrant.io/authorino-operator/) to manage instances of Authorino in this cluster.

        The current state of this distribution of the operator is: **_Technical Preview_**.

        The Community version of Authorino Operator, based on upstream public images, is available in [OperatorHub.io](https://operatorhub.io/operator/authorino-operator).

        ## Getting started

        After installing the Operator, request an instance of the external authorization service by creating an `Authorino` custom resource.

        **Minimal example (namespaced)**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          listener:
            tls:
              enabled: false
          oidcServer:
            tls:
              enabled: false
        ```

        **Extended example**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          clusterWide: true
          authConfigLabelSelectors: environment=production
          secretLabelSelectors: authorino.kuadrant.io/component=authorino,environment=production

          replicas: 2

          evaluatorCacheSize: 2 # mb

          logLevel: info
          logMode: production

          listener:
            ports:
              grpc: 50001
              http: 5001
            tls:
              certSecretRef:
                name: authorino-server-cert # secret must contain `tls.crt` and `tls.key` entries
            timeout: 2

          oidcServer:
            port: 8083
            tls:
              certSecretRef:
                name: authorino-oidc-server-cert # secret must contain `tls.crt` and `tls.key` entries

          metrics:
            port: 8080
            deep: true

          healthz:
            port: 8081

          tracing:
            endpoint: rpc://otel-collector.observability.svc.cluster.local:4317
            insecure: true

          volumes:
            items:
              - name: keycloak-tls-cert
                mountPath: /etc/ssl/certs
                configMaps:
                  - keycloak-tls-cert
                items: # details to mount the k8s configmap in the authorino pods
                  - key: keycloak.crt
                    path: keycloak.crt
            defaultMode: 420
        ```

        ### Cluster-wide vs Namespaced

        Namespaced instances only watch auth resources (`AuthConfig` and `Secrets`) created in the same namespace as the Authorino service. Use this mode for dedicated instances that do not require elevated privileges.

        Cluster-wide instances watch resources across the entire cluster (all namespaces.) Deploying and running Authorino in this mode requires elevated privileges.

        ### Multi-tenancy

        Use the `authConfigLabelSelectors` field of the `Authorino` custom resource to narrow the scope of the Authorino instance.

        Only `AuthConfig` custom resources whose labels match the value of this field will be handled by the Authorino instance.

        ## Protect a host

        To protect a host, create an `AuthConfig` custom resource for the host. E.g.:

        ```yaml
        apiVersion: authorino.kuadrant.io/v1beta2
        kind: AuthConfig
        metadata:
          name: my-api-protection
        spec:
          hosts:
          - my-api.io

          authentication:
            "keycloak":
              jwt:
                issuerUrl: https://keycloak.keycloak.svc.cluster.local:8080/realms/my-realm

          authorization:
            "k8s-rbac":
              kubernetesSubjectAccessReview:
                user:
                  selector: auth.identity.user.username
                resourceAttributes:
                  resource:
                    value: my-api
                  verb:
                    selector: request.method
              cache:
                key:
                  selector: auth.identity.user.username
                ttl: 30
            "after-2am-only":
              rego: |
                allow {
                  [hour, _, _] := time.clock(time.now_ns())
                  hour >= 2
                }
        ```

        Make sure all requests to the host are fisrt checked with the Authorino instance, by configuring an Envoy proxy for external authz:

        ```yaml
        clusters:
        - name: my-api
          …
        - name: authorino
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: authorino
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: authorino-authorino-authorization
                      port_value: 50051
        listeners:
        - filter_chains:
          - filters:
            name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              use_remote_address: true
              route_config:
                name: my-api-config
                virtual_hosts:
                - name: my-api-vs
                  domains:
                  - my-api.io
                  routes:
                  - match:
                      prefix: /
                    route:
                      cluster: my-api
              http_filters:
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  failure_mode_allow: false
                  include_peer_certificate: true
                  grpc_service:
                    envoy_grpc:
                      cluster_name: authorino
                    timeout: 1s
        ```

        ...or, if using Istio, by creating an [`AuthorizationPolicy`](https://istio.io/latest/docs/reference/config/security/authorization-policy/#AuthorizationPolicy) custom resource. Use `action: CUSTOM` in the resource and the Authorino authorization service configured in the mesh extension provider settings.

        ## Features

        **Authentication**

        * JWT validation (with OpenID Connect Discovery)
        * OAuth 2.0 Token Introspection (opaque tokens)
        * Kubernetes TokenReview (ServiceAccount tokens)
        * API key authentication
        * X.509 client certificate authentication
        * Anonymous access
        * Proxy-handled (authentication performed by the proxy)

        **Authorization**

        * Built-in simple pattern matching (e.g. JWT claims, request attributes checking)
        * OPA policies (inline Rego and fetch from external registry)
        * Kubernetes SubjectAccessReview (resource and non-resource attributes)
        * Authzed SpiceDB

        **External metadata**

        * HTTP request
        * OpenID Connect User Info
        * UMA-protected resource attributes

        **Custom responses**

        * Header injection (Festival Wristbands tokens, JSON, plain text)
        * Envoy Dynamic Metadata
        * Custom HTTP response (status code, headers, messages, body, etc)

        **Callbacks**

        * HTTP webhooks

        **Caching**

        * OpenID Connect and User-Managed Access configs
        * JSON Web Keys (JWKs) and JSON Web Key Sets (JWKS)
        * Access tokens
        * External metadata
        * Precompiled Rego policies
        * Policy evaluation

        Check out the full [Feature Specification](https://docs.kuadrant.io/authorino/docs/features/) and how-to guides in the [Kuadrant Docs](https://docs.kuadrant.io) website.
      displayName: Red Hat - Authorino (Technical Preview)
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - Authorino
        - Authorino Operator
        - Kuadrant
        - Authorization
        - Authentication
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: GitHub
          url: https://github.com/kuadrant/authorino-operator
        - name: Documentation
          url: https://docs.kuadrant.io/authorino
      maintainers:
        - email: dcesare@redhat.com
          name: Didier Di Cesare
        - email: eastizle@redhat.com
          name: Eguzki Astiz Lezaun
        - email: mcassola@redhat.com
          name: Guilherme Cassolato
      maturity: alpha
      minKubeVersion: 1.25.0
      provider:
        name: Red Hat
relatedImages:
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:54f49eb217d888ac48882e3b333aeafa463f3cc9832050e29e17ec2116599690
    name: authorino-rhel9-operator-54f49eb217d888ac48882e3b333aeafa463f3cc9832050e29e17ec2116599690-annotation
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:54f49eb217d888ac48882e3b333aeafa463f3cc9832050e29e17ec2116599690
    name: manager
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9@sha256:da01e89508304fc08f4b189e700ab72a4c3d51c277928123eb19905e41282f9d
    name: webhooks
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9@sha256:da01e89508304fc08f4b189e700ab72a4c3d51c277928123eb19905e41282f9d
    name: authorino
  - image: registry.redhat.io/openshift4/ose-cli-rhel9@sha256:585079437308204fb50649283b4b750026f723c90b8da883860d3076c2df6a8c
    name: migrator
  - image: registry.redhat.io/3scale-tech-preview/authorino-operator-bundle@sha256:f1a2c63a9903c2dbf9b3bf1b3e200f85258d8d6f6518d9e48756126d8f37653c
    name: ""
schema: olm.bundle
---
image: registry.redhat.io/3scale-tech-preview/authorino-operator-bundle@sha256:75cb78f7a40d3daedbc11cbbb5505e029328b4120f0de11d4f6423de943e92d8
name: authorino-operator.v1.1.3
package: authorino-operator
properties:
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta1
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta2
  - type: olm.gvk
    value:
      group: operator.authorino.kuadrant.io
      kind: Authorino
      version: v1beta1
  - type: olm.package
    value:
      packageName: authorino-operator
      version: 1.1.3
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "authorino.kuadrant.io/v1beta1",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "hosts": [
                  "my-api.io"
                ],
                "identity": [
                  {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "in": "authorization_header",
                      "keySelector": "APIKEY"
                    },
                    "name": "api-key-users"
                  }
                ]
              }
            },
            {
              "apiVersion": "authorino.kuadrant.io/v1beta2",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "operator.authorino.kuadrant.io/v1beta1",
              "kind": "Authorino",
              "metadata": {
                "name": "authorino-sample"
              },
              "spec": {
                "listener": {
                  "tls": {
                    "enabled": false
                  }
                },
                "oidcServer": {
                  "tls": {
                    "enabled": false
                  }
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Integration & Delivery
        containerImage: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:eb574781cf39917f8f5d9e5c806f520534601f819ee1ebcbb751832da8938008
        createdAt: "2024-11-08T11:06:33Z"
        description: Authorino
        features.operators.openshift.io/disconnected: "false"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "false"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        operators.openshift.io/valid-subscription: '["Red Hat Integration", "Red Hat 3scale API Management"]'
        operators.operatorframework.io/builder: operator-sdk-v1.32.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/Kuadrant/authorino-operator
        support: kuadrant
        tectonic-visibility: ocs
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta1
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta2
          - description: API to create instances of authorino
            displayName: Authorino
            kind: Authorino
            name: authorinos.operator.authorino.kuadrant.io
            version: v1beta1
      description: |-
        [Authorino](https://docs.kuadrant.io/authorino/) is Red Hat's Kubernetes-native lightweight external authorization service for tailor-made Zero Trust API security.

        Install this Red Hat official distribution of [Authorino Operator](https://docs.kuadrant.io/authorino-operator/) to manage instances of Authorino in this cluster.

        The current state of this distribution of the operator is: **_Technical Preview_**.

        The Community version of Authorino Operator, based on upstream public images, is available in [OperatorHub.io](https://operatorhub.io/operator/authorino-operator).

        ## Getting started

        After installing the Operator, request an instance of the external authorization service by creating an `Authorino` custom resource.

        **Minimal example (namespaced)**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          listener:
            tls:
              enabled: false
          oidcServer:
            tls:
              enabled: false
        ```

        **Extended example**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          clusterWide: true
          authConfigLabelSelectors: environment=production
          secretLabelSelectors: authorino.kuadrant.io/component=authorino,environment=production

          replicas: 2

          evaluatorCacheSize: 2 # mb

          logLevel: info
          logMode: production

          listener:
            ports:
              grpc: 50001
              http: 5001
            tls:
              certSecretRef:
                name: authorino-server-cert # secret must contain `tls.crt` and `tls.key` entries
            timeout: 2

          oidcServer:
            port: 8083
            tls:
              certSecretRef:
                name: authorino-oidc-server-cert # secret must contain `tls.crt` and `tls.key` entries

          metrics:
            port: 8080
            deep: true

          healthz:
            port: 8081

          tracing:
            endpoint: rpc://otel-collector.observability.svc.cluster.local:4317
            insecure: true

          volumes:
            items:
              - name: keycloak-tls-cert
                mountPath: /etc/ssl/certs
                configMaps:
                  - keycloak-tls-cert
                items: # details to mount the k8s configmap in the authorino pods
                  - key: keycloak.crt
                    path: keycloak.crt
            defaultMode: 420
        ```

        ### Cluster-wide vs Namespaced

        Namespaced instances only watch auth resources (`AuthConfig` and `Secrets`) created in the same namespace as the Authorino service. Use this mode for dedicated instances that do not require elevated privileges.

        Cluster-wide instances watch resources across the entire cluster (all namespaces.) Deploying and running Authorino in this mode requires elevated privileges.

        ### Multi-tenancy

        Use the `authConfigLabelSelectors` field of the `Authorino` custom resource to narrow the scope of the Authorino instance.

        Only `AuthConfig` custom resources whose labels match the value of this field will be handled by the Authorino instance.

        ## Protect a host

        To protect a host, create an `AuthConfig` custom resource for the host. E.g.:

        ```yaml
        apiVersion: authorino.kuadrant.io/v1beta2
        kind: AuthConfig
        metadata:
          name: my-api-protection
        spec:
          hosts:
          - my-api.io

          authentication:
            "keycloak":
              jwt:
                issuerUrl: https://keycloak.keycloak.svc.cluster.local:8080/realms/my-realm

          authorization:
            "k8s-rbac":
              kubernetesSubjectAccessReview:
                user:
                  selector: auth.identity.user.username
                resourceAttributes:
                  resource:
                    value: my-api
                  verb:
                    selector: request.method
              cache:
                key:
                  selector: auth.identity.user.username
                ttl: 30
            "after-2am-only":
              rego: |
                allow {
                  [hour, _, _] := time.clock(time.now_ns())
                  hour >= 2
                }
        ```

        Make sure all requests to the host are fisrt checked with the Authorino instance, by configuring an Envoy proxy for external authz:

        ```yaml
        clusters:
        - name: my-api
          …
        - name: authorino
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: authorino
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: authorino-authorino-authorization
                      port_value: 50051
        listeners:
        - filter_chains:
          - filters:
            name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              use_remote_address: true
              route_config:
                name: my-api-config
                virtual_hosts:
                - name: my-api-vs
                  domains:
                  - my-api.io
                  routes:
                  - match:
                      prefix: /
                    route:
                      cluster: my-api
              http_filters:
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  failure_mode_allow: false
                  include_peer_certificate: true
                  grpc_service:
                    envoy_grpc:
                      cluster_name: authorino
                    timeout: 1s
        ```

        ...or, if using Istio, by creating an [`AuthorizationPolicy`](https://istio.io/latest/docs/reference/config/security/authorization-policy/#AuthorizationPolicy) custom resource. Use `action: CUSTOM` in the resource and the Authorino authorization service configured in the mesh extension provider settings.

        ## Features

        **Authentication**

        * JWT validation (with OpenID Connect Discovery)
        * OAuth 2.0 Token Introspection (opaque tokens)
        * Kubernetes TokenReview (ServiceAccount tokens)
        * API key authentication
        * X.509 client certificate authentication
        * Anonymous access
        * Proxy-handled (authentication performed by the proxy)

        **Authorization**

        * Built-in simple pattern matching (e.g. JWT claims, request attributes checking)
        * OPA policies (inline Rego and fetch from external registry)
        * Kubernetes SubjectAccessReview (resource and non-resource attributes)
        * Authzed SpiceDB

        **External metadata**

        * HTTP request
        * OpenID Connect User Info
        * UMA-protected resource attributes

        **Custom responses**

        * Header injection (Festival Wristbands tokens, JSON, plain text)
        * Envoy Dynamic Metadata
        * Custom HTTP response (status code, headers, messages, body, etc)

        **Callbacks**

        * HTTP webhooks

        **Caching**

        * OpenID Connect and User-Managed Access configs
        * JSON Web Keys (JWKs) and JSON Web Key Sets (JWKS)
        * Access tokens
        * External metadata
        * Precompiled Rego policies
        * Policy evaluation

        Check out the full [Feature Specification](https://docs.kuadrant.io/authorino/docs/features/) and how-to guides in the [Kuadrant Docs](https://docs.kuadrant.io) website.
      displayName: Red Hat - Authorino (Technical Preview)
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - Authorino
        - Authorino Operator
        - Kuadrant
        - Authorization
        - Authentication
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: GitHub
          url: https://github.com/kuadrant/authorino-operator
        - name: Documentation
          url: https://docs.kuadrant.io/authorino
      maintainers:
        - email: dcesare@redhat.com
          name: Didier Di Cesare
        - email: eastizle@redhat.com
          name: Eguzki Astiz Lezaun
        - email: mcassola@redhat.com
          name: Guilherme Cassolato
      maturity: alpha
      minKubeVersion: 1.25.0
      provider:
        name: Red Hat
relatedImages:
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:eb574781cf39917f8f5d9e5c806f520534601f819ee1ebcbb751832da8938008
    name: authorino-rhel9-operator-eb574781cf39917f8f5d9e5c806f520534601f819ee1ebcbb751832da8938008-annotation
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9-operator@sha256:eb574781cf39917f8f5d9e5c806f520534601f819ee1ebcbb751832da8938008
    name: manager
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9@sha256:a473dae20e71e3e813ac30ba978f2ab3c5e19d7d39b501ae9103dca892107c87
    name: webhooks
  - image: registry.redhat.io/3scale-tech-preview/authorino-rhel9@sha256:a473dae20e71e3e813ac30ba978f2ab3c5e19d7d39b501ae9103dca892107c87
    name: authorino
  - image: registry.redhat.io/openshift4/ose-cli-rhel9@sha256:3a398158d10018bfac5df291d6998b513cf9a30e5477bcaefddcf66d229627c7
    name: migrator
  - image: registry.redhat.io/3scale-tech-preview/authorino-operator-bundle@sha256:75cb78f7a40d3daedbc11cbbb5505e029328b4120f0de11d4f6423de943e92d8
    name: ""
schema: olm.bundle
---
image: registry.redhat.io/rhcl-1/authorino-operator-bundle@sha256:ca00981e52dbee8ce0551e4a4f6dec8275887b0c43eff4691662063630df6348
name: authorino-operator.v1.2.0
package: authorino-operator
properties:
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta2
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta3
  - type: olm.gvk
    value:
      group: operator.authorino.kuadrant.io
      kind: Authorino
      version: v1beta1
  - type: olm.package
    value:
      packageName: authorino-operator
      version: 1.2.0
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "authorino.kuadrant.io/v1beta2",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "authorino.kuadrant.io/v1beta3",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "operator.authorino.kuadrant.io/v1beta1",
              "kind": "Authorino",
              "metadata": {
                "name": "authorino-sample"
              },
              "spec": {
                "listener": {
                  "tls": {
                    "enabled": false
                  }
                },
                "oidcServer": {
                  "tls": {
                    "enabled": false
                  }
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Integration & Delivery
        containerImage: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:fc181bc51c9099031b9724e5a9e7818d04e440b43bae461770d2c8529bbf5a4e
        createdAt: "2024-11-21T13:37:42Z"
        description: Enables authentication and authorization for Gateways and applications in a Gateway API network.
        features.operators.openshift.io/disconnected: "false"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "false"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        operators.openshift.io/valid-subscription: '["Red Hat Connectivity Link"]'
        operators.operatorframework.io/builder: operator-sdk-v1.32.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/Kuadrant/authorino-operator
        support: kuadrant
        tectonic-visibility: ocs
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta2
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta3
          - description: API to create instances of authorino
            displayName: Authorino
            kind: Authorino
            name: authorinos.operator.authorino.kuadrant.io
            version: v1beta1
      description: |-
        [Authorino](https://docs.kuadrant.io/authorino/) is Red Hat's Kubernetes-native lightweight external authorization service for tailor-made Zero Trust API security.

        Install this Red Hat official distribution of [Authorino Operator](https://docs.kuadrant.io/authorino-operator/) to manage instances of Authorino in this cluster.

        The current state of this distribution of the operator is: **Generally Available**.

        The Community version of Authorino Operator, based on upstream public images, is available in [OperatorHub.io](https://operatorhub.io/operator/authorino-operator).

        ## Getting started

        After installing the Operator, request an instance of the external authorization service by creating an `Authorino` custom resource.

        **Minimal example (namespaced)**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          listener:
            tls:
              enabled: false
          oidcServer:
            tls:
              enabled: false
        ```

        **Extended example**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          clusterWide: true
          authConfigLabelSelectors: environment=production
          secretLabelSelectors: authorino.kuadrant.io/component=authorino,environment=production

          replicas: 2

          evaluatorCacheSize: 2 # mb

          logLevel: info
          logMode: production

          listener:
            ports:
              grpc: 50001
              http: 5001
            tls:
              certSecretRef:
                name: authorino-server-cert # secret must contain `tls.crt` and `tls.key` entries
            timeout: 2

          oidcServer:
            port: 8083
            tls:
              certSecretRef:
                name: authorino-oidc-server-cert # secret must contain `tls.crt` and `tls.key` entries

          metrics:
            port: 8080
            deep: true

          healthz:
            port: 8081

          tracing:
            endpoint: rpc://otel-collector.observability.svc.cluster.local:4317
            insecure: true

          volumes:
            items:
              - name: keycloak-tls-cert
                mountPath: /etc/ssl/certs
                configMaps:
                  - keycloak-tls-cert
                items: # details to mount the k8s configmap in the authorino pods
                  - key: keycloak.crt
                    path: keycloak.crt
            defaultMode: 420
        ```

        ### Cluster-wide vs Namespaced

        Namespaced instances only watch auth resources (`AuthConfig` and `Secrets`) created in the same namespace as the Authorino service. Use this mode for dedicated instances that do not require elevated privileges.

        Cluster-wide instances watch resources across the entire cluster (all namespaces.) Deploying and running Authorino in this mode requires elevated privileges.

        ### Multi-tenancy

        Use the `authConfigLabelSelectors` field of the `Authorino` custom resource to narrow the scope of the Authorino instance.

        Only `AuthConfig` custom resources whose labels match the value of this field will be handled by the Authorino instance.

        ## Protect a host

        To protect a host, create an `AuthConfig` custom resource for the host. E.g.:

        ```yaml
        apiVersion: authorino.kuadrant.io/v1beta3
        kind: AuthConfig
        metadata:
          name: my-api-protection
        spec:
          hosts:
          - my-api.io

          authentication:
            "keycloak":
              jwt:
                issuerUrl: https://keycloak.keycloak.svc.cluster.local:8080/realms/my-realm

          authorization:
            "k8s-rbac":
              kubernetesSubjectAccessReview:
                user:
                  selector: auth.identity.user.username
                resourceAttributes:
                  resource:
                    value: my-api
                  verb:
                    selector: request.method
              cache:
                key:
                  selector: auth.identity.user.username
                ttl: 30
            "after-2am-only":
              rego: |
                allow {
                  [hour, _, _] := time.clock(time.now_ns())
                  hour >= 2
                }
        ```

        Make sure all requests to the host are fisrt checked with the Authorino instance, by configuring an Envoy proxy for external authz:

        ```yaml
        clusters:
        - name: my-api
          …
        - name: authorino
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: authorino
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: authorino-authorino-authorization
                      port_value: 50051
        listeners:
        - filter_chains:
          - filters:
            name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              use_remote_address: true
              route_config:
                name: my-api-config
                virtual_hosts:
                - name: my-api-vs
                  domains:
                  - my-api.io
                  routes:
                  - match:
                      prefix: /
                    route:
                      cluster: my-api
              http_filters:
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  failure_mode_allow: false
                  include_peer_certificate: true
                  grpc_service:
                    envoy_grpc:
                      cluster_name: authorino
                    timeout: 1s
        ```

        ...or, if using Istio, by creating an [`AuthorizationPolicy`](https://istio.io/latest/docs/reference/config/security/authorization-policy/#AuthorizationPolicy) custom resource. Use `action: CUSTOM` in the resource and the Authorino authorization service configured in the mesh extension provider settings.

        ## Features

        **Authentication**

        * JWT validation (with OpenID Connect Discovery)
        * OAuth 2.0 Token Introspection (opaque tokens)
        * Kubernetes TokenReview (ServiceAccount tokens)
        * API key authentication
        * X.509 client certificate authentication
        * Anonymous access
        * Proxy-handled (authentication performed by the proxy)

        **Authorization**

        * Built-in simple pattern matching (e.g. JWT claims, request attributes checking)
        * OPA policies (inline Rego and fetch from external registry)
        * Kubernetes SubjectAccessReview (resource and non-resource attributes)
        * Authzed SpiceDB

        **External metadata**

        * HTTP request
        * OpenID Connect User Info
        * UMA-protected resource attributes

        **Custom responses**

        * Header injection (Festival Wristbands tokens, JSON, plain text)
        * Envoy Dynamic Metadata
        * Custom HTTP response (status code, headers, messages, body, etc)

        **Callbacks**

        * HTTP webhooks

        **Caching**

        * OpenID Connect and User-Managed Access configs
        * JSON Web Keys (JWKs) and JSON Web Key Sets (JWKS)
        * Access tokens
        * External metadata
        * Precompiled Rego policies
        * Policy evaluation

        Check out the full [Feature Specification](https://docs.kuadrant.io/authorino/docs/features/) and how-to guides in the [Kuadrant Docs](https://docs.kuadrant.io) website.
      displayName: Red Hat - Authorino Operator
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - Authorino
        - Authorino Operator
        - Kuadrant
        - Authorization
        - Authentication
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: GitHub
          url: https://github.com/kuadrant/authorino-operator
        - name: Documentation
          url: https://docs.kuadrant.io/authorino
      maintainers:
        - email: dcesare@redhat.com
          name: Didier Di Cesare
        - email: eastizle@redhat.com
          name: Eguzki Astiz Lezaun
        - email: mcassola@redhat.com
          name: Guilherme Cassolato
      maturity: alpha
      minKubeVersion: 1.25.0
      provider:
        name: Red Hat
relatedImages:
  - image: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:fc181bc51c9099031b9724e5a9e7818d04e440b43bae461770d2c8529bbf5a4e
    name: authorino-rhel9-operator-fc181bc51c9099031b9724e5a9e7818d04e440b43bae461770d2c8529bbf5a4e-annotation
  - image: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:fc181bc51c9099031b9724e5a9e7818d04e440b43bae461770d2c8529bbf5a4e
    name: authorino-operator
  - image: registry.redhat.io/rhcl-1/authorino-rhel9@sha256:4125b12ac239367626fdeaa9c2b4b905e2abb791c99b689a67498da7579a0ec0
    name: authorino
  - image: registry.redhat.io/rhcl-1/authorino-operator-bundle@sha256:ca00981e52dbee8ce0551e4a4f6dec8275887b0c43eff4691662063630df6348
    name: ""
schema: olm.bundle
---
image: registry.redhat.io/rhcl-1/authorino-operator-bundle@sha256:f3084120951879a29ee690ab78eef6dbcde5228b6ab3956060280d40a09d4af7
name: authorino-operator.v1.2.1
package: authorino-operator
properties:
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta2
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta3
  - type: olm.gvk
    value:
      group: operator.authorino.kuadrant.io
      kind: Authorino
      version: v1beta1
  - type: olm.package
    value:
      packageName: authorino-operator
      version: 1.2.1
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "authorino.kuadrant.io/v1beta2",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "authorino.kuadrant.io/v1beta3",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "operator.authorino.kuadrant.io/v1beta1",
              "kind": "Authorino",
              "metadata": {
                "name": "authorino-sample"
              },
              "spec": {
                "listener": {
                  "tls": {
                    "enabled": false
                  }
                },
                "oidcServer": {
                  "tls": {
                    "enabled": false
                  }
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Integration & Delivery
        containerImage: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:90b10b2cd89893eed468e85c4b0e7a21d010e11594a29f33d58f8e404d3c7fa5
        createdAt: "2025-02-25T14:17:46Z"
        description: Enables authentication and authorization for Gateways and applications in a Gateway API network.
        features.operators.openshift.io/disconnected: "false"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "false"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        operators.openshift.io/valid-subscription: '["Red Hat Connectivity Link"]'
        operators.operatorframework.io/builder: operator-sdk-v1.32.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/Kuadrant/authorino-operator
        support: kuadrant
        tectonic-visibility: ocs
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta2
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta3
          - description: API to create instances of authorino
            displayName: Authorino
            kind: Authorino
            name: authorinos.operator.authorino.kuadrant.io
            version: v1beta1
      description: |-
        [Authorino](https://docs.kuadrant.io/authorino/) is Red Hat's Kubernetes-native lightweight external authorization service for tailor-made Zero Trust API security.

        Install this Red Hat official distribution of [Authorino Operator](https://docs.kuadrant.io/authorino-operator/) to manage instances of Authorino in this cluster.

        The current state of this distribution of the operator is: **Generally Available**.

        The Community version of Authorino Operator, based on upstream public images, is available in [OperatorHub.io](https://operatorhub.io/operator/authorino-operator).

        ## Getting started

        After installing the Operator, request an instance of the external authorization service by creating an `Authorino` custom resource.

        **Minimal example (namespaced)**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          listener:
            tls:
              enabled: false
          oidcServer:
            tls:
              enabled: false
        ```

        **Extended example**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          clusterWide: true
          authConfigLabelSelectors: environment=production
          secretLabelSelectors: authorino.kuadrant.io/component=authorino,environment=production

          replicas: 2

          evaluatorCacheSize: 2 # mb

          logLevel: info
          logMode: production

          listener:
            ports:
              grpc: 50001
              http: 5001
            tls:
              certSecretRef:
                name: authorino-server-cert # secret must contain `tls.crt` and `tls.key` entries
            timeout: 2

          oidcServer:
            port: 8083
            tls:
              certSecretRef:
                name: authorino-oidc-server-cert # secret must contain `tls.crt` and `tls.key` entries

          metrics:
            port: 8080
            deep: true

          healthz:
            port: 8081

          tracing:
            endpoint: rpc://otel-collector.observability.svc.cluster.local:4317
            insecure: true

          volumes:
            items:
              - name: keycloak-tls-cert
                mountPath: /etc/ssl/certs
                configMaps:
                  - keycloak-tls-cert
                items: # details to mount the k8s configmap in the authorino pods
                  - key: keycloak.crt
                    path: keycloak.crt
            defaultMode: 420
        ```

        ### Cluster-wide vs Namespaced

        Namespaced instances only watch auth resources (`AuthConfig` and `Secrets`) created in the same namespace as the Authorino service. Use this mode for dedicated instances that do not require elevated privileges.

        Cluster-wide instances watch resources across the entire cluster (all namespaces.) Deploying and running Authorino in this mode requires elevated privileges.

        ### Multi-tenancy

        Use the `authConfigLabelSelectors` field of the `Authorino` custom resource to narrow the scope of the Authorino instance.

        Only `AuthConfig` custom resources whose labels match the value of this field will be handled by the Authorino instance.

        ## Protect a host

        To protect a host, create an `AuthConfig` custom resource for the host. E.g.:

        ```yaml
        apiVersion: authorino.kuadrant.io/v1beta3
        kind: AuthConfig
        metadata:
          name: my-api-protection
        spec:
          hosts:
          - my-api.io

          authentication:
            "keycloak":
              jwt:
                issuerUrl: https://keycloak.keycloak.svc.cluster.local:8080/realms/my-realm

          authorization:
            "k8s-rbac":
              kubernetesSubjectAccessReview:
                user:
                  selector: auth.identity.user.username
                resourceAttributes:
                  resource:
                    value: my-api
                  verb:
                    selector: request.method
              cache:
                key:
                  selector: auth.identity.user.username
                ttl: 30
            "after-2am-only":
              rego: |
                allow {
                  [hour, _, _] := time.clock(time.now_ns())
                  hour >= 2
                }
        ```

        Make sure all requests to the host are fisrt checked with the Authorino instance, by configuring an Envoy proxy for external authz:

        ```yaml
        clusters:
        - name: my-api
          …
        - name: authorino
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: authorino
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: authorino-authorino-authorization
                      port_value: 50051
        listeners:
        - filter_chains:
          - filters:
            name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              use_remote_address: true
              route_config:
                name: my-api-config
                virtual_hosts:
                - name: my-api-vs
                  domains:
                  - my-api.io
                  routes:
                  - match:
                      prefix: /
                    route:
                      cluster: my-api
              http_filters:
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  failure_mode_allow: false
                  include_peer_certificate: true
                  grpc_service:
                    envoy_grpc:
                      cluster_name: authorino
                    timeout: 1s
        ```

        ...or, if using Istio, by creating an [`AuthorizationPolicy`](https://istio.io/latest/docs/reference/config/security/authorization-policy/#AuthorizationPolicy) custom resource. Use `action: CUSTOM` in the resource and the Authorino authorization service configured in the mesh extension provider settings.

        ## Features

        **Authentication**

        * JWT validation (with OpenID Connect Discovery)
        * OAuth 2.0 Token Introspection (opaque tokens)
        * Kubernetes TokenReview (ServiceAccount tokens)
        * API key authentication
        * X.509 client certificate authentication
        * Anonymous access
        * Proxy-handled (authentication performed by the proxy)

        **Authorization**

        * Built-in simple pattern matching (e.g. JWT claims, request attributes checking)
        * OPA policies (inline Rego and fetch from external registry)
        * Kubernetes SubjectAccessReview (resource and non-resource attributes)
        * Authzed SpiceDB

        **External metadata**

        * HTTP request
        * OpenID Connect User Info
        * UMA-protected resource attributes

        **Custom responses**

        * Header injection (Festival Wristbands tokens, JSON, plain text)
        * Envoy Dynamic Metadata
        * Custom HTTP response (status code, headers, messages, body, etc)

        **Callbacks**

        * HTTP webhooks

        **Caching**

        * OpenID Connect and User-Managed Access configs
        * JSON Web Keys (JWKs) and JSON Web Key Sets (JWKS)
        * Access tokens
        * External metadata
        * Precompiled Rego policies
        * Policy evaluation

        Check out the full [Feature Specification](https://docs.kuadrant.io/authorino/docs/features/) and how-to guides in the [Kuadrant Docs](https://docs.kuadrant.io) website.
      displayName: Red Hat - Authorino Operator
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - Authorino
        - Authorino Operator
        - Kuadrant
        - Authorization
        - Authentication
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: GitHub
          url: https://github.com/kuadrant/authorino-operator
        - name: Documentation
          url: https://docs.kuadrant.io/authorino
      maintainers:
        - email: dcesare@redhat.com
          name: Didier Di Cesare
        - email: eastizle@redhat.com
          name: Eguzki Astiz Lezaun
        - email: mcassola@redhat.com
          name: Guilherme Cassolato
      maturity: alpha
      minKubeVersion: 1.25.0
      provider:
        name: Red Hat
relatedImages:
  - image: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:90b10b2cd89893eed468e85c4b0e7a21d010e11594a29f33d58f8e404d3c7fa5
    name: authorino-rhel9-operator-90b10b2cd89893eed468e85c4b0e7a21d010e11594a29f33d58f8e404d3c7fa5-annotation
  - image: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:90b10b2cd89893eed468e85c4b0e7a21d010e11594a29f33d58f8e404d3c7fa5
    name: authorino-operator
  - image: registry.redhat.io/rhcl-1/authorino-rhel9@sha256:4125b12ac239367626fdeaa9c2b4b905e2abb791c99b689a67498da7579a0ec0
    name: authorino
  - image: registry.redhat.io/rhcl-1/authorino-operator-bundle@sha256:f3084120951879a29ee690ab78eef6dbcde5228b6ab3956060280d40a09d4af7
    name: ""
schema: olm.bundle
---
image: registry.redhat.io/rhcl-1/authorino-operator-bundle@sha256:7f3d41672fa8c60725304f0d45e468a4f01defcab7352501737ffddfd32edded
name: authorino-operator.v1.2.2
package: authorino-operator
properties:
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta2
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta3
  - type: olm.gvk
    value:
      group: operator.authorino.kuadrant.io
      kind: Authorino
      version: v1beta1
  - type: olm.package
    value:
      packageName: authorino-operator
      version: 1.2.2
  - type: olm.csv.metadata
    value:
      annotations:
        alm-examples: |-
          [
            {
              "apiVersion": "authorino.kuadrant.io/v1beta2",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "authorino.kuadrant.io/v1beta3",
              "kind": "AuthConfig",
              "metadata": {
                "name": "my-api-protection"
              },
              "spec": {
                "authentication": {
                  "api-key-users": {
                    "apiKey": {
                      "selector": {
                        "matchLabels": {
                          "group": "friends"
                        }
                      }
                    },
                    "credentials": {
                      "authorizationHeader": {
                        "prefix": "APIKEY"
                      }
                    }
                  }
                },
                "hosts": [
                  "my-api.io"
                ]
              }
            },
            {
              "apiVersion": "operator.authorino.kuadrant.io/v1beta1",
              "kind": "Authorino",
              "metadata": {
                "name": "authorino-sample"
              },
              "spec": {
                "listener": {
                  "tls": {
                    "enabled": false
                  }
                },
                "oidcServer": {
                  "tls": {
                    "enabled": false
                  }
                }
              }
            }
          ]
        capabilities: Basic Install
        categories: Integration & Delivery
        containerImage: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:2d81613856df9725ad20928a7a9895d14482c42effce0a3a0de88f40ec35d411
        createdAt: "2025-03-25T22:39:23Z"
        description: Enables authentication and authorization for Gateways and applications in a Gateway API network.
        features.operators.openshift.io/disconnected: "false"
        features.operators.openshift.io/fips-compliant: "false"
        features.operators.openshift.io/proxy-aware: "false"
        features.operators.openshift.io/tls-profiles: "false"
        features.operators.openshift.io/token-auth-aws: "false"
        features.operators.openshift.io/token-auth-azure: "false"
        features.operators.openshift.io/token-auth-gcp: "false"
        operators.openshift.io/valid-subscription: '["Red Hat Connectivity Link"]'
        operators.operatorframework.io/builder: operator-sdk-v1.32.0
        operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
        repository: https://github.com/Kuadrant/authorino-operator
        support: kuadrant
        tectonic-visibility: ocs
      apiServiceDefinitions: {}
      crdDescriptions:
        owned:
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta2
          - description: API to describe the desired protection for a service
            displayName: AuthConfig
            kind: AuthConfig
            name: authconfigs.authorino.kuadrant.io
            version: v1beta3
          - description: API to create instances of authorino
            displayName: Authorino
            kind: Authorino
            name: authorinos.operator.authorino.kuadrant.io
            version: v1beta1
      description: |-
        [Authorino](https://docs.kuadrant.io/authorino/) is Red Hat's Kubernetes-native lightweight external authorization service for tailor-made Zero Trust API security.

        Install this Red Hat official distribution of [Authorino Operator](https://docs.kuadrant.io/authorino-operator/) to manage instances of Authorino in this cluster.

        The current state of this distribution of the operator is: **Generally Available**.

        The Community version of Authorino Operator, based on upstream public images, is available in [OperatorHub.io](https://operatorhub.io/operator/authorino-operator).

        ## Getting started

        After installing the Operator, request an instance of the external authorization service by creating an `Authorino` custom resource.

        **Minimal example (namespaced)**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          listener:
            tls:
              enabled: false
          oidcServer:
            tls:
              enabled: false
        ```

        **Extended example**

        ```yaml
        apiVersion: operator.authorino.kuadrant.io/v1beta1
        kind: Authorino
        metadata:
          name: authorino
        spec:
          clusterWide: true
          authConfigLabelSelectors: environment=production
          secretLabelSelectors: authorino.kuadrant.io/component=authorino,environment=production

          replicas: 2

          evaluatorCacheSize: 2 # mb

          logLevel: info
          logMode: production

          listener:
            ports:
              grpc: 50001
              http: 5001
            tls:
              certSecretRef:
                name: authorino-server-cert # secret must contain `tls.crt` and `tls.key` entries
            timeout: 2

          oidcServer:
            port: 8083
            tls:
              certSecretRef:
                name: authorino-oidc-server-cert # secret must contain `tls.crt` and `tls.key` entries

          metrics:
            port: 8080
            deep: true

          healthz:
            port: 8081

          tracing:
            endpoint: rpc://otel-collector.observability.svc.cluster.local:4317
            insecure: true

          volumes:
            items:
              - name: keycloak-tls-cert
                mountPath: /etc/ssl/certs
                configMaps:
                  - keycloak-tls-cert
                items: # details to mount the k8s configmap in the authorino pods
                  - key: keycloak.crt
                    path: keycloak.crt
            defaultMode: 420
        ```

        ### Cluster-wide vs Namespaced

        Namespaced instances only watch auth resources (`AuthConfig` and `Secrets`) created in the same namespace as the Authorino service. Use this mode for dedicated instances that do not require elevated privileges.

        Cluster-wide instances watch resources across the entire cluster (all namespaces.) Deploying and running Authorino in this mode requires elevated privileges.

        ### Multi-tenancy

        Use the `authConfigLabelSelectors` field of the `Authorino` custom resource to narrow the scope of the Authorino instance.

        Only `AuthConfig` custom resources whose labels match the value of this field will be handled by the Authorino instance.

        ## Protect a host

        To protect a host, create an `AuthConfig` custom resource for the host. E.g.:

        ```yaml
        apiVersion: authorino.kuadrant.io/v1beta3
        kind: AuthConfig
        metadata:
          name: my-api-protection
        spec:
          hosts:
          - my-api.io

          authentication:
            "keycloak":
              jwt:
                issuerUrl: https://keycloak.keycloak.svc.cluster.local:8080/realms/my-realm

          authorization:
            "k8s-rbac":
              kubernetesSubjectAccessReview:
                user:
                  selector: auth.identity.user.username
                resourceAttributes:
                  resource:
                    value: my-api
                  verb:
                    selector: request.method
              cache:
                key:
                  selector: auth.identity.user.username
                ttl: 30
            "after-2am-only":
              rego: |
                allow {
                  [hour, _, _] := time.clock(time.now_ns())
                  hour >= 2
                }
        ```

        Make sure all requests to the host are fisrt checked with the Authorino instance, by configuring an Envoy proxy for external authz:

        ```yaml
        clusters:
        - name: my-api
          …
        - name: authorino
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: authorino
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: authorino-authorino-authorization
                      port_value: 50051
        listeners:
        - filter_chains:
          - filters:
            name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              use_remote_address: true
              route_config:
                name: my-api-config
                virtual_hosts:
                - name: my-api-vs
                  domains:
                  - my-api.io
                  routes:
                  - match:
                      prefix: /
                    route:
                      cluster: my-api
              http_filters:
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  failure_mode_allow: false
                  include_peer_certificate: true
                  grpc_service:
                    envoy_grpc:
                      cluster_name: authorino
                    timeout: 1s
        ```

        ...or, if using Istio, by creating an [`AuthorizationPolicy`](https://istio.io/latest/docs/reference/config/security/authorization-policy/#AuthorizationPolicy) custom resource. Use `action: CUSTOM` in the resource and the Authorino authorization service configured in the mesh extension provider settings.

        ## Features

        **Authentication**

        * JWT validation (with OpenID Connect Discovery)
        * OAuth 2.0 Token Introspection (opaque tokens)
        * Kubernetes TokenReview (ServiceAccount tokens)
        * API key authentication
        * X.509 client certificate authentication
        * Anonymous access
        * Proxy-handled (authentication performed by the proxy)

        **Authorization**

        * Built-in simple pattern matching (e.g. JWT claims, request attributes checking)
        * OPA policies (inline Rego and fetch from external registry)
        * Kubernetes SubjectAccessReview (resource and non-resource attributes)
        * Authzed SpiceDB

        **External metadata**

        * HTTP request
        * OpenID Connect User Info
        * UMA-protected resource attributes

        **Custom responses**

        * Header injection (Festival Wristbands tokens, JSON, plain text)
        * Envoy Dynamic Metadata
        * Custom HTTP response (status code, headers, messages, body, etc)

        **Callbacks**

        * HTTP webhooks

        **Caching**

        * OpenID Connect and User-Managed Access configs
        * JSON Web Keys (JWKs) and JSON Web Key Sets (JWKS)
        * Access tokens
        * External metadata
        * Precompiled Rego policies
        * Policy evaluation

        Check out the full [Feature Specification](https://docs.kuadrant.io/authorino/docs/features/) and how-to guides in the [Kuadrant Docs](https://docs.kuadrant.io) website.
      displayName: Red Hat - Authorino Operator
      installModes:
        - supported: false
          type: OwnNamespace
        - supported: false
          type: SingleNamespace
        - supported: false
          type: MultiNamespace
        - supported: true
          type: AllNamespaces
      keywords:
        - Authorino
        - Authorino Operator
        - Kuadrant
        - Authorization
        - Authentication
      labels:
        operatorframework.io/arch.amd64: supported
        operatorframework.io/arch.arm64: supported
        operatorframework.io/arch.ppc64le: supported
        operatorframework.io/arch.s390x: supported
        operatorframework.io/os.linux: supported
      links:
        - name: GitHub
          url: https://github.com/kuadrant/authorino-operator
        - name: Documentation
          url: https://docs.kuadrant.io/authorino
      maintainers:
        - email: dcesare@redhat.com
          name: Didier Di Cesare
        - email: eastizle@redhat.com
          name: Eguzki Astiz Lezaun
        - email: mcassola@redhat.com
          name: Guilherme Cassolato
      maturity: alpha
      minKubeVersion: 1.25.0
      provider:
        name: Red Hat
relatedImages:
  - image: registry.redhat.io/rhcl-1/authorino-operator-bundle@sha256:7f3d41672fa8c60725304f0d45e468a4f01defcab7352501737ffddfd32edded
    name: ""
  - image: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:2d81613856df9725ad20928a7a9895d14482c42effce0a3a0de88f40ec35d411
    name: authorino-rhel9-operator-2d81613856df9725ad20928a7a9895d14482c42effce0a3a0de88f40ec35d411-annotation
  - image: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:2d81613856df9725ad20928a7a9895d14482c42effce0a3a0de88f40ec35d411
    name: authorino-operator
  - image: registry.redhat.io/rhcl-1/authorino-rhel9@sha256:413d3796ad0101bf14d3341d31d9367e67fea1e73ebb3fb79124ef4c5dde0c09
    name: authorino
schema: olm.bundle
---
image: quay.io/redhat-user-workloads/api-management-tenant/rhcl-1-1-authorino-operator-bundle@sha256:71c2187aafb30b3fc59da1534147ef2cf5fa9f8217c74479b723da4764c08a85
name: authorino-operator.v1.2.3
package: authorino-operator
properties:
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta2
  - type: olm.gvk
    value:
      group: authorino.kuadrant.io
      kind: AuthConfig
      version: v1beta3
  - type: olm.gvk
    value:
      group: operator.authorino.kuadrant.io
      kind: Authorino
      version: v1beta1
  - type: olm.package
    value:
      packageName: authorino-operator
      version: 1.2.3
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoib3BlcmF0b3JzLmNvcmVvcy5jb20vdjFhbHBoYTEiLCJraW5kIjoiQ2x1c3RlclNlcnZpY2VWZXJzaW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiYWxtLWV4YW1wbGVzIjoiW1xuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwiYXV0aG9yaW5vLmt1YWRyYW50LmlvL3YxYmV0YTJcIixcbiAgICBcImtpbmRcIjogXCJBdXRoQ29uZmlnXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJteS1hcGktcHJvdGVjdGlvblwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJhdXRoZW50aWNhdGlvblwiOiB7XG4gICAgICAgIFwiYXBpLWtleS11c2Vyc1wiOiB7XG4gICAgICAgICAgXCJhcGlLZXlcIjoge1xuICAgICAgICAgICAgXCJzZWxlY3RvclwiOiB7XG4gICAgICAgICAgICAgIFwibWF0Y2hMYWJlbHNcIjoge1xuICAgICAgICAgICAgICAgIFwiZ3JvdXBcIjogXCJmcmllbmRzXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVkZW50aWFsc1wiOiB7XG4gICAgICAgICAgICBcImF1dGhvcml6YXRpb25IZWFkZXJcIjoge1xuICAgICAgICAgICAgICBcInByZWZpeFwiOiBcIkFQSUtFWVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJob3N0c1wiOiBbXG4gICAgICAgIFwibXktYXBpLmlvXCJcbiAgICAgIF1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcImFwaVZlcnNpb25cIjogXCJhdXRob3Jpbm8ua3VhZHJhbnQuaW8vdjFiZXRhM1wiLFxuICAgIFwia2luZFwiOiBcIkF1dGhDb25maWdcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwibmFtZVwiOiBcIm15LWFwaS1wcm90ZWN0aW9uXCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImF1dGhlbnRpY2F0aW9uXCI6IHtcbiAgICAgICAgXCJhcGkta2V5LXVzZXJzXCI6IHtcbiAgICAgICAgICBcImFwaUtleVwiOiB7XG4gICAgICAgICAgICBcInNlbGVjdG9yXCI6IHtcbiAgICAgICAgICAgICAgXCJtYXRjaExhYmVsc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJncm91cFwiOiBcImZyaWVuZHNcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNyZWRlbnRpYWxzXCI6IHtcbiAgICAgICAgICAgIFwiYXV0aG9yaXphdGlvbkhlYWRlclwiOiB7XG4gICAgICAgICAgICAgIFwicHJlZml4XCI6IFwiQVBJS0VZXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImhvc3RzXCI6IFtcbiAgICAgICAgXCJteS1hcGkuaW9cIlxuICAgICAgXVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm9wZXJhdG9yLmF1dGhvcmluby5rdWFkcmFudC5pby92MWJldGExXCIsXG4gICAgXCJraW5kXCI6IFwiQXV0aG9yaW5vXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJhdXRob3Jpbm8tc2FtcGxlXCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImxpc3RlbmVyXCI6IHtcbiAgICAgICAgXCJ0bHNcIjoge1xuICAgICAgICAgIFwiZW5hYmxlZFwiOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJvaWRjU2VydmVyXCI6IHtcbiAgICAgICAgXCJ0bHNcIjoge1xuICAgICAgICAgIFwiZW5hYmxlZFwiOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5dIiwiY2FwYWJpbGl0aWVzIjoiQmFzaWMgSW5zdGFsbCIsImNhdGVnb3JpZXMiOiJJbnRlZ3JhdGlvbiBcdTAwMjYgRGVsaXZlcnkiLCJjb250YWluZXJJbWFnZSI6InJlZ2lzdHJ5LnJlZGhhdC5pby9yaGNsLTEvYXV0aG9yaW5vLXJoZWw5LW9wZXJhdG9yQHNoYTI1NjoxYjJlODQyYjY0MmY4NzM3ZGU4YjMyMjllNjI0Y2I1NDg1OGRlMmNmYzI3NTBkYWI1OTNkODk0OTY4YWQ4ZWJlIiwiY3JlYXRlZEF0IjoiMjUgU2VwIDIwMjUsIDA5OjM3IiwiZGVzY3JpcHRpb24iOiJFbmFibGVzIGF1dGhlbnRpY2F0aW9uIGFuZCBhdXRob3JpemF0aW9uIGZvciBHYXRld2F5cyBhbmQgYXBwbGljYXRpb25zIGluIGEgR2F0ZXdheSBBUEkgbmV0d29yay4iLCJmZWF0dXJlcy5vcGVyYXRvcnMub3BlbnNoaWZ0LmlvL2NuZiI6ImZhbHNlIiwiZmVhdHVyZXMub3BlcmF0b3JzLm9wZW5zaGlmdC5pby9jbmkiOiJmYWxzZSIsImZlYXR1cmVzLm9wZXJhdG9ycy5vcGVuc2hpZnQuaW8vY3NpIjoiZmFsc2UiLCJmZWF0dXJlcy5vcGVyYXRvcnMub3BlbnNoaWZ0LmlvL2Rpc2Nvbm5lY3RlZCI6InRydWUiLCJmZWF0dXJlcy5vcGVyYXRvcnMub3BlbnNoaWZ0LmlvL2ZpcHMtY29tcGxpYW50IjoiZmFsc2UiLCJmZWF0dXJlcy5vcGVyYXRvcnMub3BlbnNoaWZ0LmlvL3Byb3h5LWF3YXJlIjoiZmFsc2UiLCJmZWF0dXJlcy5vcGVyYXRvcnMub3BlbnNoaWZ0LmlvL3Rscy1wcm9maWxlcyI6ImZhbHNlIiwiZmVhdHVyZXMub3BlcmF0b3JzLm9wZW5zaGlmdC5pby90b2tlbi1hdXRoLWF3cyI6ImZhbHNlIiwiZmVhdHVyZXMub3BlcmF0b3JzLm9wZW5zaGlmdC5pby90b2tlbi1hdXRoLWF6dXJlIjoiZmFsc2UiLCJmZWF0dXJlcy5vcGVyYXRvcnMub3BlbnNoaWZ0LmlvL3Rva2VuLWF1dGgtZ2NwIjoiZmFsc2UiLCJvcGVyYXRvcnMub3BlbnNoaWZ0LmlvL3ZhbGlkLXN1YnNjcmlwdGlvbiI6IltcIlJlZCBIYXQgQ29ubmVjdGl2aXR5IExpbmtcIl0iLCJvcGVyYXRvcnMub3BlcmF0b3JmcmFtZXdvcmsuaW8vYnVpbGRlciI6Im9wZXJhdG9yLXNkay12MS4zMi4wIiwib3BlcmF0b3JzLm9wZXJhdG9yZnJhbWV3b3JrLmlvL3Byb2plY3RfbGF5b3V0IjoiZ28ua3ViZWJ1aWxkZXIuaW8vdjMiLCJyZXBvc2l0b3J5IjoiaHR0cHM6Ly9naXRodWIuY29tL0t1YWRyYW50L2F1dGhvcmluby1vcGVyYXRvciIsInN1cHBvcnQiOiJrdWFkcmFudCJ9LCJsYWJlbHMiOnsib3BlcmF0b3JmcmFtZXdvcmsuaW8vYXJjaC5hbWQ2NCI6InN1cHBvcnRlZCIsIm9wZXJhdG9yZnJhbWV3b3JrLmlvL2FyY2guYXJtNjQiOiJzdXBwb3J0ZWQiLCJvcGVyYXRvcmZyYW1ld29yay5pby9hcmNoLnBwYzY0bGUiOiJzdXBwb3J0ZWQiLCJvcGVyYXRvcmZyYW1ld29yay5pby9hcmNoLnMzOTB4Ijoic3VwcG9ydGVkIiwib3BlcmF0b3JmcmFtZXdvcmsuaW8vb3MubGludXgiOiJzdXBwb3J0ZWQifSwibmFtZSI6ImF1dGhvcmluby1vcGVyYXRvci52MS4yLjMiLCJuYW1lc3BhY2UiOiJwbGFjZWhvbGRlciJ9LCJzcGVjIjp7ImFwaXNlcnZpY2VkZWZpbml0aW9ucyI6e30sImN1c3RvbXJlc291cmNlZGVmaW5pdGlvbnMiOnsib3duZWQiOlt7ImRlc2NyaXB0aW9uIjoiQVBJIHRvIGRlc2NyaWJlIHRoZSBkZXNpcmVkIHByb3RlY3Rpb24gZm9yIGEgc2VydmljZSIsImRpc3BsYXlOYW1lIjoiQXV0aENvbmZpZyIsImtpbmQiOiJBdXRoQ29uZmlnIiwibmFtZSI6ImF1dGhjb25maWdzLmF1dGhvcmluby5rdWFkcmFudC5pbyIsInZlcnNpb24iOiJ2MWJldGEyIn0seyJkZXNjcmlwdGlvbiI6IkFQSSB0byBkZXNjcmliZSB0aGUgZGVzaXJlZCBwcm90ZWN0aW9uIGZvciBhIHNlcnZpY2UiLCJkaXNwbGF5TmFtZSI6IkF1dGhDb25maWciLCJraW5kIjoiQXV0aENvbmZpZyIsIm5hbWUiOiJhdXRoY29uZmlncy5hdXRob3Jpbm8ua3VhZHJhbnQuaW8iLCJ2ZXJzaW9uIjoidjFiZXRhMyJ9LHsiZGVzY3JpcHRpb24iOiJBUEkgdG8gY3JlYXRlIGluc3RhbmNlcyBvZiBhdXRob3Jpbm8iLCJkaXNwbGF5TmFtZSI6IkF1dGhvcmlubyIsImtpbmQiOiJBdXRob3Jpbm8iLCJuYW1lIjoiYXV0aG9yaW5vcy5vcGVyYXRvci5hdXRob3Jpbm8ua3VhZHJhbnQuaW8iLCJ2ZXJzaW9uIjoidjFiZXRhMSJ9XX0sImRlc2NyaXB0aW9uIjoiVGhlIG9wZXJhdG9yIHRvIG1hbmFnZSBpbnN0YW5jZXMgb2YgQXV0aG9yaW5vIiwiZGlzcGxheU5hbWUiOiJBdXRob3Jpbm8gT3BlcmF0b3IiLCJpY29uIjpbeyJiYXNlNjRkYXRhIjoiaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQVh3QUFBRjhDQVlBQUFETTV3REtBQUFBQ1hCSVdYTUFBRzY2QUFCdXVnSFczckVYQUFBZ0FFbEVRVlI0bk8zZGYyelQxNzMvOFRjUWw4UUUyOE9BRE1Va3NJa29JVm5jYUZTRFJqZjVhNXBhM1pKcWYxU3I3bGRrMHY0b3V0OEo3NCtwV3pXSklPMTJRL3NuYUpyYVB5WVZkTDlxdFQrbWhuN1ZhZG8vSlZmUVRtTnFIU1dBRXEyUWtBSVdFR29iRTV2YWxQdUhFNkFkRkgvT09aOWYvandmVWpYcFhvNTlWS2t2SDg1NW4vZFpjZmZ1WFFFQU5MNlZiazhBQU9BTUFoOEFBb0xBQjRDQUlQQUJJQ0FJZkFBSUNBSWZBQUtDd0FlQWdDRHdBU0FnQ0h3QUNJZ210eWZRcUxxNnV2cFhyVnIxblZBb05MQnk1Y3B2TkRjM2Q2eGF0YXBaUkNRYWpjYmNuaC9ndG53K254TVJ1WFBuVHJsY0xrOS84Y1VYbjFVcWxmRTdkKzc4NCt6WnN5ZmRubDhqV2tGckJYMDlQVDNwVmF0V2ZiK2xwZVZiTFMwdG0xdGJXMXZjbmhQZ2Q4VmlzVlFxbFM3ZnZuMTdzbEtwakU5T1RvNjZQU2UvSS9BdDZ1enNiSHZpaVNkZVhyMTY5ZmRiVzFzN0NIZkFPY1Zpc1ZRc0ZxZHYzNzc5bDg4Ly8veU5jK2ZPemJrOUp6OGg4T3ZRM2QzOVluTno4LzVJSlBJMEFROTRSN0ZZTEJVS2hiK1h5K1hYcDZhbS91ajJmTHlPd0grRTd1N3VGOFBoOE05anNWaDNjM016WngyQXg1WEw1V291bDV0YVhGejhEZUgvY0FUK0E3cTZ1dnJENGZDdjFxMWI5d3doRC9oWHVWeXUzcmh4NDlUaTR1SXZPUUMrajhBWGtWUXE5WWRvTlBvRHFtZUF4cFBQNTNQNWZQNVBtVXpteDI3UHhXMkJEZnpPenM2Mk5XdldIR00xRHdURDhxci8xcTFiKzRKNjJCdTR3Ty9xNnVwdmJXMzkzZnIxNjN1Ym1wcFd1RDBmQU02cVZxdDNyMSsvUGxFc0ZuOFN0TzJld0FSK1YxZFhmelFhUGJwaHc0WnZ1ajBYQU41dzdkcTFUL0w1L0hCUWdyL2hBMzk1NjJiejVzMERiczhGZ0RkZHZueDVQQWhiUFEwZCtIMTlmZThrRW9tOWJOMEFlSnhxdFhvM204MGUvK2lqajE1d2V5NTJhY2pBNytucFNXL2F0T20zWGoyTXJWUXFVaWdVSHZyL1cxaFljSGcyZ0gzaThmaEQvKytSU0VSQ29aRERzNmxQdVZ5dVhybHk1V2VOMk1xaG9RSy9zN096TFI2UC8yM2R1blVKdCtkU0tCUmtjWEZSQ29XQzVQUDVleUZmcVZUY25ocmdHYUZRNkY3NFI2TlJpVVFpRWc2SEpSS0p1RDAxdVhIalJuWmhZZUc3amJUTjB6Q0I3K2IyVGFsVWt1dlhyOThMZDFicGdMNTRQSDd2UjJEOSt2WFMwdUo4VjVORzIrYnhmZUIzZG5hMmJkeTRNZVAwcGFsc05pc0xDd3VTeldabGNYSFJ5YThHQWlrY0Rrc2lrWkI0UEM2SmhMTi9pYy9uODdtclY2K20vTDdhOTNYZzkvYjIvdnJKSjU5OHhZbFZmYVZTa1d3MmUrOGZBTzVLSkJMMy9uSGlQS0JhcmQ2OWRPblM0WW1KaVYvWS9tVTI4V1hnZDNaMnRxMWR1M1lza1VpazdQNnU1WUNmbjUrMys2c0FLRW9tay9mQzMyN1piRFp6OCtiTklUK3U5bjBYK0YxZFhmMkpST0t2ZHJZcHJsUXFjdUhDQlptZm4yZTdCdkNSY0Rnc3lXUlN0bTNiWnV1cXYxZ3NsckxaN1BmOGRtSExWNEZ2OXhaT3FWU1M2ZWxwVnZOQUEwZ21rOUxSMFdIYllhOGZ0M2g4RS9oOWZYM3ZiTm15WmNpT3oxNVlXSkR6NTgrek53ODBvRVFpSWR1M2IzL2tuUUJkbjM3NjZaaGZxbmg4RWZpN2QrLytweDA5Y0VxbGtuejg4Y2VVVVFJQkVJL0g1YW1ubnJKbHhYL3QyclZQUHZ6d3cyOFovMkREUEIzNGRwVmNWaW9WT1hQbURGczNRQUFsazBuWnVYT244VDErUDVSdWVqYndPenM3MnpadDJuVE85T0hzek15TW5EOS9uaHV2UUlDRlFpSFp2bjI3N05peHcram5Gb3ZGMHBVclZ6cTlHdnFlRFB5bm4zNzYyNjJ0clg4ekdmWUxDd3N5TlRYMXlCNDJBSUluRW9sSWQzZTMwZjE5TDRlKzV3Sy91N3Y3eGExYnQ3NXRxaEtuVXFuY1c5VUR3TU1zci9aTmJmTlVxOVc3Rnk5ZS9LSFhIbFAzVk9DYkR2dENvU0NuVDUrbWxoN0FZNFhEWWRtMWE1ZXh4bTFlREgzUEJQNldMVnUrL2UxdmZ6dGpLdXhuWm1aa2VucmF4RWNCQ0pDT2pnNWplL3ZWYXZYdWhRc1h0bmxsZThjVGdXL3lnTFpTcWNqcDA2Y3B0UVNnTEI2UHk2NWR1NHhzOFhocFQ5LzF3RGNaOW9WQ1FUNzQ0QU1xY0FCb0M0VkNzbWZQSGlOYlBGNEovWlZ1ZnJtSXlNYU5Hek1td241K2ZsN0d4OGNKZXdCR1ZDb1ZHUjhmTjNKZnA3VzF0V1hqeG8wWkE5UFM0bXJnNzk2OSs1OG1MbFhOek14SUp1UDZ2MHNBRFNpVHljak16SXoyNTBTajBkanUzYnYvYVdCS3lsd0wvTDYrdm5kTXRFdklaREljemdLdzFmVDB0SkZGNVlZTkc3N1oxOWYzam9FcEtYRWw4SHQ3ZTMrdDJ3aXRVcWxJSnBPaFBRSUFSOHpQejBzbWs5SGVOdDZ5WmN0UWIyL3ZydzFOeXhMSEQyMjd1cnI2Mjl2Yi8wZW4vTEpTcWNnSEgzekFyVmtBam90RUlySm56eDZ0Q3A1cXRYcDNkbmIyMzV6dXArL29Dcit6czdNdGtVajhsYkFINEZjbXFnR2JtcHBXSkJLSnYzWjJkcllabk5wak9ScjRhOWV1SGRPcHlDSHNBWGlCaWRCdmJXMXRXYnQyN1pqQmFUMldZNEhmMjl2N2E5MDNhTStjT1VQWUEvQ0VRcUVnWjg2YzBmcU1SQ0tSY25JLzM1RTkvTTdPenJadDI3WmQwTm5LNFlBV2dCY2xrMGxKcGRUWHNrNjJYM0JraGI5eDQwYXRIamt6TXpPRVBRQlBtcCtmMTZyVGIycHFXdUhVcFN6YkE3K3ZyKzhkbmN0VjgvUHoxTmtEOExUcDZXbXRSV2swR28wNVVaOXZhK0F2VmVYc1ZSMWZLQlM0UVF2QUZ6S1pqTllaWXlLUjJHdDMxWTZ0Z1IrUHgvK211cFd6WEpFREFINmhVN25UMU5TMEloNlAvODN3bEw3RXRzRHY2ZWxKcjF1M0xxRTYvdlRwMHpSQ0ErQXJ5KzNaVmExYnR5N1IwOU9UTmppbEw3RXQ4RGR0MnZSYjFiRXpNelAwc3dmZ1N3c0xDMXFIdURyWitUaTJCSDVmWDk4N3pjM05UU3BqQzRVQ2g3UUFmRzE2ZWxwNVA3KzV1Ym5KcmdOYzQ0R3ZjMUNyKzljaEFQQUtuVzFwdXc1d2pRZittalZyanFrZTFNN016UERnT0lDR3NMaTRxTHkxMDlUVXRHTE5talhIREUvSmJPQjNkWFgxYjk2OGVVQmw3TUxDZ3B3L2Y5N2tkQURBVmVmUG4xYytqOXk4ZWZOQVYxZFh2OG41R0EzOGFEUjZWSFhzMU5TVXdaa0FnRGZvWkp0T3BqNk1zY0R2NnVycVYzM0JhbVptaHFab0FCcFNvVkJRM3RyWnNHSEROMDJ1OG8wRmZtdHI2KzlVeGxVcUZiWnlBRFMwOCtmUEt4L2dxbWJyd3hnSi9NN096cmIxNjlmM3FvdzljK1lNRjZ3QU5MUktwYUxjU25uOSt2VzlwaXAyakFTK2FtVk9xVlNpQ3lhQVFKaWZuNWRTcVdSNW5NbUtIU09CdjI3ZHVtZFV4bjM4OGNjbXZoNEFmRUUxODFRejlxdTBBeitWU3YxQjVWYnR3c0lDN1JNQUJJcHE3alUzTnplbFVxay82SDYvZHVCSG85RWZxSXpqb0JaQUVLbG1uMnJXUGtncjhMdTZ1dnBWSGpjcGxVcVN6V1oxdmhvQWZDbWJ6U3J0NVVlajBaaHVpYVpXNElmRDRWK3BqS001R29BZ1U4MUExY3hkcGhYNEtnY0psVXFGeWh3QWdUWS9QNjlVanE1N2VLc2MrTjNkM1MrcUhOWmV1SEJCOVNzQm9HR29aR0Z6YzNOVGQzZjNpNnJmcVJ6NDRYRDQ1eXJqV04wRGdIb1dxbWF2aUViZ3gyS3hicXRqc3RrczdZOEJRR3J0azFXS1YxU3lkNWxTNEt0dTUxQ1pBd0QzcVdTaXpyYU9VdUEzTnpmdnR6cUd3MW9BK0RMVncxdVZEQlpSRFB4SUpQSzAxVEdzN2dIZ1g2bGtvMG9HaXlnRWZtZG5aMXRyYTJ1TDFYRUVQZ0Q4SzVWc2JHMXRiVkhwb0drNThKOTQ0b21Yclk0UklmQUI0R0ZVczFFbGl5MEgvdXJWcTc5dmRReGhEd0NQcHBLUktsbHNPZkJiVzFzN3JJNmhLeVlBUEpwS1JxcGtzVXJnczM4UEFBYXA3dU5iSFdNcDhIdDZldEpXdjZCVUtuSFpDZ0MreHVMaW9sSUhUYXVaYkNud1cxcGFMTzhaWGI5KzNlb1FBQWdjbGF3TWhVSURWdjY4cGNCZnRXclZ0NnhOUjZSUUtGZ2RBZ0NCbzVLVnExZXY3ckh5NTYydThEZGJtNDVJUHArM09nUUFBa2NsSzYxbXNxWEFWemtrb0VJSEFCNVBzVkxIVWliWEhmZ3FUMnV4blFNQTlWUEpUQ3ZaWEhmZ3IxcTE2anRXSjBKMURnRFVUeVV6cldSejNZRnY5VFJZaEJVK0FGaWhrcGxXc3JudXdGKzVjdVUzckU2RUExc0FxSjlLWmxySjVyb0R2N201MmZJMVhwVSt6d0FRVklxOThldk9aaXQ3K00xV0o4S1dEZ0RVVHlVenJXU3o4cHUyOVdDRkR3RDFzenN6Nnc3OGFEUWFzL0xCaEQwQVdHYzFPNjFrczIwcmZMWnpBTUE2TzdQVDFpMGRBSUIzRVBnQUVCQUVQZ0FFQklFUEFBRlJWK0EvLy96ejdWWS9tQ29kQUhER2loVXIydXY1YzNVRi9ydnZ2anRyZFFKVTZRQ0FkU3J0RmU3ZXZUdGJ6NTlqU3djQVBLUmFyZHIyMlFRK0FBUUVnUThBQVVIZ0EwQkFFUGdBRUJBRVBnQUVCSUVQQUFGQjRBTkFRQkQ0QUJBUUJENEFCQVNCRHdBQlFlQURRRUFRK0FBUUVBUStBQVFFZ1E4QUFVSGdBMEJBRVBnQUVCQUVQZ0FFQklFUEFBRkI0QU5BUUJENEFCQVFCRDRBQkVTVDJ4T0FubGdzSnFsVXl1MXBhRHR4NG9TcjM5OGpJbEZYWitCOWt5S1NkM3NTMEVMZysxUXNGcFBSMFZIWnQyK2YyMU14WW01dVRrWkdSdVRvMGFPT2Z1OXpJdkthaUNRZC9WYi9lbHRFWGhXQzM2L1kwdkdoV0N3bUowNmNhSml3RnhGcGEydVROOTk4MDlIQWYwVkUvbHNJZXl0K0tDTC9YL2pia0Y4UitENDBOalltdmIyOWJrL0RGdnYyN1pPaG9TSGJ2K2M1cVFVK3JPc1drZi9uOWlTZ2hNRDNtYUdoSVJrWUdIQjdHcllhSFIyMS9UdGVzLzBiR3RzelV2dlJoTDhRK0Q2eXZHL2Y2TnJhMm1Sd2NOQzJ6MzlGMk1ZeGdSOU4veUh3ZlNTZFRrdGJXNXZiMC9DMXFJanNkM3NTRFNJcGJJdjVEWUh2RSszdDdaSk9wOTJlaHUrOUppSVJ0eWZSUVBhTHlGYTNKNEc2RWZnK01USXlJdEVvdFJFNitxVldaUUp6SXNJcTMwOElmQjhZSEJ4c3FCTE14NW1ibTdQbEloYkJaSThmU3UzSEZONUg0UHZBeU1pSTIxTndsQjFiVnk5SnJiSUU5dURIMUI4SWZJOGJIaDV1K0RMTUJ4MDdka3pHeHNhTWZtWlVDQ1M3UFNPMUgxVjRHNEh2WVVFcHd4U3BiZU84OE1JTE1qdzhiUHl6WHhiS01KM3dtbkFEMSt2b3BlTmg2WFJhK2FEMlJ6LzZrY3pPenBxZGtJM3NhcDYyVmRUTE1FK0p5R0dEYy9HTEhoSDVMNFZ4RWFuOXVBYngzNWxmRVBnZTFkN2VMZ2NQSGxRYU96NCs3bmdUTXEvU0tjTjhWV29kSW9QbXBJZzhLMnBuSHE5SXJjSGFSYU16Z2lsczZYaVV6bGFPSGRzaWZ0UXZ0ZUJTOFlZRU0reVgvYWZHV0c3Z2VoZUI3MEdEZzRPeWQrOWVwYkZIamh6eDFWYU9uVlNEcHlCc1MxeVUybytlaW1lRk1rMnZJdkE5U0hWMW44L25BMWZDK1NndlNhMnJvNHJEUXI5M2tkcS9oNExpV0ZiNTNrVGdlMHc2blZadWZUd3lNaUs1WE03d2pQd25LdXFCTXk4aXJ4dWNpNS9sUmYxdk90MUN6eUl2SXZBOUpCYUxLYS9RSnlZbUFsUEMrVGl2aVBwQnJjN2VkU042WFVTbUZNZStJcFJwZWcyQjd5RTYvWEpvckZhelZXcWxnU3BPU2ExQ0JWLzJxdUk0K3V4NEQ0SHZFZTN0N1hMZ3dBR2xzY2VQSDNmOUVYQ3YrTDNHV0ZiM0QzZFNSUDZzT1BabG9adW1seEQ0SHFGVE44L3F2cVpmMVB2bEhCWnF4NytPNmlwZlJPOUhHR1lSK0I2ZzgyemhvVU9IS01OY29ob3NCVkV2UVF5S2k2SitnUHVNVUticEZRUytCK2lVWVhKUVc3TmYxUHZsdkNxVVlkYmpEVkV2MDJTVjd3MEV2c3RHUmthVW55MU1wOU9VWVlwZU44d3BFWG5MNEZ3YVdWN1V0M1o0RHRFYkNId1h4V0l4NWYxMyt1WGNwOXN2Qi9WN1MyclZUQ3IyQzJXYWJpUHdYVFE2T3FwY2hzbU4ycG9lVVgrMjhHMmhERk9GNmw1K1JMaUI2ellDM3lXcFZFcjUyY0pqeDQ1UmhybUVmam5PT3ltMUgwc1ZQNVRhanpUY1FlQzdoSDQ1K3A0VDlUTE0xNFV5VEIzMDJmRW5BdDhGT3M4V2pvNk9Vb2E1UktkZkRtV1llaTZLZXMraFo2VDJZdzNuRWZnTzArbVhNemMzeCtwK3lTdWlYb1pKTjB3ejNwRGFqNmNLbmtOMEI0SHZzSFE2clZXR0NmMW5DeW5ETkVPM1RGTzE1eEhVRWZnT2FtOXYxeXJESEJzYk16d2pmOUxwaGtrWnBsbnZpVjZaSm4xMm5FWGdPNGh1bVByNlJhOE1NOGpQRnRxRmJwcitRZUE3WkhCd1VLc01NNVBKR0o2UlA2a0dSRUZZM2R0bFV2VEtOT216NHh3QzN5RTZaWmlzN210ZUVyMHlUQTVxN2ZPcVVLYnBCd1MrQTRhSGgzbTJVSlB1czRWY3NySlhYdFRMTkx1bDltTU8reEg0Tm92RllzcXIrN201T2JwaExubFpPS2oxdXNOQ21hYlhFZmcyUzZmVHlnZTF3OFBEWmlmalUxdEZmZS8rbE5RcVNlQU0xVmZESWtLWnBoTUlmQnUxdDdmTHdZTUhsY2FPajQvVEwyZUp6aDR2enhZNjY2U29sMm0rSXBScDJvM0F0NUhPZGd5cis1cCtFWGxXY2V3YlFyOGNOK2o4eUhLQWF5OEMzeWFEZzRPeWQrOWVwYkZIamh5aFg4NFN1bUg2ejBWUjcxWDByRkNtYVNjQzN5YXFqNVBRRGZPKy9WS3I0RkJCdnh4MzZYVFQ1RGxFK3hENE50RHRsME1acHQ2emhmT2lYaUlJTTNUNzdLajJTc0xYSS9BTjArbUdPVEV4d2JPRlMzVDY1WEJRNncxdlNlM05ZQld2Q0dXYWRpRHdEYU5manI2dG9sNmk5MmZoMlVJdm9jK090eEQ0QnFWU0tUbHc0SURTMk9QSGoxT0d1VVJuRDVkTFZ0NXlVbW8vd2lwZUZzbzBUU1B3RGRJcHcyUjFYOU12NnYxeURndGxtRjZrOHlQTUFhNVpCTDRoUTBORHlzOFdIanAwaURMTUphci9nUmVFWnd1OTZxS29sOGp5SEtKWkJMNGg5TXZScC9OczRhdENHYWFYNlQ2SENETUlmQU5HUmthVXl6RHBobGtURlo0dGJHUjVVVi9sSjRVRFhGTUlmRTJ4V0V6cjJVTEtNR3RlRS9VeVRHN1Urc05ib3ZjY0ltV2ErZ2g4VGFPam84cGxtTnlvcmVrUnZXY0xLY1AwRDlVZjU0aXd0V01DZ2E5Qjk5bEN5akJyNkpjVEhDZEY3em5FSG9OekNTSUNYNFBxQ3AxK09mYzlKM3JQRmxLRzZUODZmWFpZNWVzaDhCVU5EdzhybDJHT2pvNVNoaW42enhaU2h1bFBGMFc5MTlFenduT0lPZ2g4QlRyOWN1Ym01bGpkTDNsWktNTU1LcDNuRU9tem80N0FWNkRiRFJPMUsvTTZaWmc4VytoL090MDBlUTVSRFlGdlVYdDd1MVlaNXRqWW1PRVorWk5PTjB6NjVUU0c5MFN2VEpNK085WVIrQmJwbEdHeXVxL3BGNzB5ekVtRGM3RmJMQmFUd2NGQkdSa1prY0hCUVdsdmIzZDdTcDZpMDAyVEExenJDSHdMZEo4dHpHUXlobWZrVHpwbG1INVozY2RpTVRsNjlLaDg5dGxuOHY3Nzc4dkJnd2ZsL2ZmZmx3c1hMc2lKRXljSS9pV1R3bk9JVGlMd0xWRHRlVU1aNW4wdmlmcXpoYStMUHc1cTI5dmJaWFoyOXBGM05BWUdCaVNUeVVncWxYSjRadDVFbWFaekNQdzZEUThQUzI5dnI5SlkrdVhVNkpaaCt1V1MxZGpZMkdPMy9hTFJxSXlOalVrc0ZuTm9WdDZsMDJlbld5alR0SUxBcjVOT0dTYmRNR3Rla3NaL3R0REt3cUN0clUyR2g0ZnRuWkJQdkM1NlpacW9ENEZmaDhIQlFlVXlUUDZEdnU5WnhYR254Qi85Y21LeG1PVWY5NkdoSVp0bTR6K3FQK3BKWVMrL1hnUytqY2JIeCttWDh3RFZGZ3ArV2QycnZHZXNlbHU3RVowVTlUSk5MbUxWaDhDSHA3MGgvdWlYMDk3ZXJ2eWVNZUFVQXI4T3FnZXVBd01ETWpnNGFIWXlQbVoxOWVhbmJwaXE3eHFNajQrYm5ZaVA2YnhuN0lkRmdSY1ErSFhJWkRJeU56ZW5OSllIVHU3N3M4VS9mMWo4VVlZNU9EaW92RFhEemV2N1ZOOHpuaGQvWGNaekU0RmZKOVVxbmJhMk5tN1lMbmxMNnEvRW1CTDFqb3BPVS8xUnorZnpMQWlXN0JmMVJucCsrVnVnRnhENGRUcDY5S2hNVEV3b2pSMFpHYUhlV21xcjlmK1F4MSt5S1N6OU9UL1FiYVRIL1l6YWdhdHFhZVdVOEo2eEZRUytCYW9yOVdnMHlrM2JKWk1pOG0veTZQMzh0MFdrVi95eEo2dlRKcHYzak8ramtaNXpDSHdMVHB3NEljZVBIMWNhZStEQUFhN1NMN2tvSXY4dUlpa1JlVjVFL3UvUy8yNlRXZ21tSC9idFJYalAySVFlVVc5MS9HZnh4LzBNTHlId0xVcW4wNUxQcTBVU04yNi83S0xVL29OOWErbC8vUkwwSWlLcFZJcjNqQTBJUWlNOUx5SHdMWnFkblZVTzdvR0JBVzVXTmdnYTZlbmpQV1BuRWZnS1JrZEhsY3MwV2VYNzM5RFFFTzhaRzhCN3hzNGo4QlhrY2ptdE1rMVdlUDZsMGk5bkdZMzA3bnRGOU1vdy9iVDk1eVVFdnFLalI0OHEzNUpNcDlNOGdPRlRsR0hxMDMzUG1ESk1kUVMrQnRXVk9tV2Evc1I3eG1aUWh1a2VBbC9EaVJNbjVOaXhZMHBqOSszYlI1OGRuMUhwaHJtTTI5WTFRWHJQMklzSWZFMDZaWnFzOHYxamNIQlFxd3lUOTR4clZHL1VVb1pwQm9HdktaZkxhWlZwOGtDS1A2aitPT2Z6ZVZiM1MxNFN2VEpNRG1yMUVmZ0dqSXlNS0pkcDBtZkgrNGFIaDdYS01EbW8xZXVYNDZmM2pMMk93RGRFZFJWSE4wMXYweTNEWk51dTVtVlJMOE5rSzhjY0F0K1FzYkV4NVRMTmd3Y1BVcWJwVWVsMFd2bWdsdTI2bXEyaXZyby9KU0x2R1p4TDBCSDRCdW1zMUxtUTR6M3Q3ZTF5OE9CQnBiRzhaM3lmNm8xYUVmKzhaK3dYQkw1Qm1VeEdqaHc1b2pSMjc5NjlsR2w2ak02UE1LdjdtbjRSZVZaeHJGL2VNL1lUQXQrd2taRVJ1bWsyZ01IQlFkbTdkNi9TMkNOSGp0QXZaNGxPTjB3T2FzMGo4QTNUNmJQVDI5dkx5dEFqNklhcDd5VVI2VlljUzc4Y2V4RDROdER0cGttWnBydlM2YlQwOXZZcWo2VU1zMWFHcWRNTjB5L3ZHZnNOZ1c4VDFaVTZmWGJjcGZOczRjVEVCTThXTHRIcGw4TkJyWDBJZkp2b1BvZEltYVk3NkplamI2dndiS0ZYRWZnMjBna0FWb3JPYTI5dmx3TUhEaWlOUFg3OE9HV1lTMzZ2TVpaTFZ2WWk4RzAwT3pzcmh3NGRVaG83TURCQW1hYkRkSDVrV2QzWDlJdDZ2NXpEUWhtbTNRaDhtNDJPamlxWGFiTEtkNDdPczRXSERoMmlESE9KNnVxK0lEeGI2QVFDMzJhNVhJNCtPejdBczRYNjlvdGV2eHpLTU8xSDREdmc2TkdqTWpFeG9UU1dicHIyR3hrWlVYNjJjR1JraERKTTBldUdPU1U4VytnVUF0OGhxaXYxYURUS0N0SkdzVmhNNjlsQ3R0MXFYaE9lTGZRREF0OGh1czhocGxJcHd6T0NTRzByUjdVTWsvc1NOVDJpOTJ3aFpaak9JZkFkUko4ZGIwbWxVbHJQRmxLR1dVTy9IUDhnOEIwME96dXI5UnppME5DUTRSa0ZHLzF5OUQwbmVzOFdVb2JwTEFMZllicDlkbUNHN3JPRmxHSHE5OHVoRE5ONUJMN0RkTHBwdHJXMXNiSTBRS2RmRHM4VzNxZjdiQ0ZsbU00ajhGMXc5T2hSNWVjUTArazBmWFkwcGROcDVUSk03a1hVYkpWYTNiMEtuaTEwRDRIdkVwMHlUVmFZNnRyYjI3WEtNTWZHeGd6UHlKOTB1bUZTaHVrZUF0OGxtVXhHcTB5VFBqdHE2SWFwcjEvMHlqQW5EYzRGMWhENExrcW4wOHBsbXF6eXJSc2NITlFxdzh4a01vWm41RStxTjJvTHd1cmViUVMraTNLNW5GYVpKczhoV3FOVGhzbnF2dVlsMFN2RDVLRFdYUVMreTBaR1JuZ08wUUhEdzhQS3p4YlNMNmRHdHd5VFMxYnVJL0E5UU9jQWw1WG40OFZpTWJwaEd2Q3k4R3loM3hINEhqQTJOcVpjcG5udzRFSEtOQjhqblU0ckg5U3liVmF6VmRUMzdrOEovWEs4Z3NEM0NKMWdZUVg2YU8zdDdYTHc0RUdsc2VQajQvVExXYUs2bFNQQzZ0NUxDSHlQbUoyZGxTTkhqaWlOM2J0M0wyV2FqNkRUdnBqVmZVMi9pRHlyT1BZTm9WK09seEQ0SGtJM1RiTUdCd2Q1dHRBQXVtRTJEZ0xmUTNUNjdQVDI5bktBK3hXcXEvdDhQczhQNkpMOUl0S3RPUGF3VUlicE5RUyt4NHlPanZJY29nRzYvWElvdzlSL3R2QjFnM09CR1FTK0I5Rm5SNDlPTjh5SmlRbWVMVnhDdjV6R1ErQjcwSWtUSitUNDhlTktZdzhjT0JENE1rMzY1ZWpiS3JXNmV4Vi9Gc293dllyQTl5aWQ0QW55Q2pXVlNzbUJBd2VVeGg0L2Zwd3l6Q1cvMXhqTDZ0NjdtdHllQUI1dWRuWldEaDA2cEZSRHZ0eG5KNGhWSnFwYk9YYjN5K20zN1pQTjZ4SDFmam1IaFRKTUx5UHdQV3gwZEZUNWx1aWJiNzVwdzR3YWwxM1BGajRudGJKRzFaZWgvS1FnUEZ2b2RXenBlRmd1bDJOUDJRRjI5Y3Y1dllqOHR3UWo3RVY0dHRBUENIeVAwM2tPRWZXeG94dm1jNkwrU0lnZm5SS1J0OXllQkI2THdQY0JTaTN0TXo0K2Jzc2h0MDd2R1QvaVJxMC9FUGcrY09MRUNlWG5FUEgxN1BneDdaZmdiT09JMUo0dHBBelRId2g4bjlEcHM0T0hPM2JzR0dXWW11aVg0eThFdmsvTXpzN1MzOFVnbmkwMDQzV2hETk5QQ0h3ZkdSMGRWWDRPRVY4Mk9qcEt2eHhOUEZ2b1B3UytqMUNtYWNiYzNKeXRCK0VucFJhR2pZNGJ0ZjVENFB1TXpuT0lxSEhpUjdQUncvQ1VpTHpuOWlSZ0dZSHZRME5EUThvdGxJUHVwei85cVl5TmpkbitQZTlKclhxbEVVMkp5SCs0UFFrb0lmQjlLSmZMeWVEZ29QS1RpRUUwTnpjbkw3endncU1IMy84cEl2OUhHbXQ3NTIwUitYZmhScTFmMFV2SHA1YjM4MGRHUmlTVlNyazlIVS9MNVhLU3lXUmMrZTczbHY3cGtkcURJbjQyS1FTOTN4SDRQcGZMNWFnbDk0Rkp0eWNBQ0ZzNkFCQVlCRDRBQkFTQkR3QUJRZUFEUUVBUStBQVFFQVErQUFRRWdROEFBVUhnQTBCQUVQZ0FFQkFFUGdBRUJJRVBBQUZCNEFOQVFCRDRBQkFRQkQ0QUJBU0JEd0FCUWVBRFFFQVErQUFRRUFRK0FBUUVnUThBQVVIZ0EwQkFFUGdBRUJBRVBnQUVoRzJCSDRsRTdQcG9BR2hZOFhqYzhwam5uMysrdlo0L1oxdmdoMElodXo0YUFQQ0FkOTk5ZDdhZVA4ZVdEZ0FFQklFUEFBRkI0QU5BUUJENEFCQVFWT2tBZ0lmWW1aMTFCMzQrbjg5WitXQ3FkQURBT3F2WmFTV2JiZDNTSWZRQm9INTJaMmJkZ1gvbnpwMnkxUTluV3djQTZxZVNtVmF5dWU3QUw1ZkwwMVlud2dvZkFPcW5rcGxXc3JudXdQL2lpeTgrc3pxUmFEUnFkUWdBQkpaS1pscko1cm9EdjFLcGpGdWRDRnM2QUZBL2xjeTBrczFXOXZEL1lYVWk0WERZNmhBQUNDeVZ6TFNTelhVSC90bXpaMDlhblFncmZBQ29uMHBtV3NsbVMyV1p4V0t4WkhVeUtxMCtBU0JvVkxMU2FpWmJDdnhTcVhUWjJuUTR1QVdBZXFoa3BkVk10aHI0LzdRMkhiWjFBS0FlS2xsNSsvYnRTU3QvM2xMZzM3bHo1eS9XcGlPeWZ2MTZxME1BSUhCVXN0SnE5YVNsd0orY25CeTFOaDJSbHBZV3FuVUE0R3VFdzJGcGFXbXhQTTVxSmx2dXBhTnljSnRJSkt3T0FZREFVTWxJbFN4V0NYekxMUmFvMUFHQVIxT3MwTEdjeFpZRC8vYnQyNWIzOFZuaEE4Q2pxV1NrU2haYkR2elBQLy84RGF0alJBaDlBSGdZMVd4VXlXTExnWC91M0xrNTl2RUJ3QXpWL2Z0ejU4N05XUjJuOUFCS29WRDR1OVV4QkQ0QS9DdVZiRlRKWUJIRndDK1h5NjliSFJNS2hTU1pUS3A4SFFBMHBHUXlxZG9EMzNJR2l5Z0cvdFRVMUIvTDVYTFY2amhXK1FCd24wb21sc3ZsNnRUVTFCOVZ2ay81VGR0Y0xqZGxkVXdpa2VBU0ZnQkk3YktWU3VDclpPOHk1Y0JmWEZ6OGpjbzR0blVBUUQwTFZiTlhSQ1B3VmJkMXRtM2JwdnFWQU5Bd1ZMSlFaenRIUkNQd1JVUnUzTGh4eXVvWURtOEJCSjNxWWExSzVqNUlLL0FYRnhkL3FUS3VvNk5ENTJzQndOZFVNMUExYzVkcEJmN1pzMmRQNXZQNW5OVnhMUzB0Vk93QUNLUkVJcUhVR1RPZnorZFVucHA5a0ZiZ0wwM2lUeXJqdG0vZnJ2dlZBT0E3cXRtbm1yVVAwZzc4VENielk1WEQyM2c4VGhkTkFJR2ltbnZsY3JtYXlXUityUHY5Mm9Fdm9uNlE4TlJUVDVuNGVnRHdCZFhNMHoyc1hXWWs4Ry9kdXJXdldxM2V0VHF1cGFXRmloMEFnWkJNSnBYMjdxdlY2dDFidDI3dE16RUhJNEYvN3R5NXVldlhyMCtvak4yNWM2ZFNlUklBK0VVb0ZKS2RPM2NxamIxKy9mcUVTbWZNaHpFUytDSWl4V0x4SnlyalFxRVFCN2dBR3RyMjdkdVZGN2FxMmRMN0sxUUFBQWdHU1VSQlZQb3d4Z0wvN05teko2OWR1L2FKeXRnZE8zWklKQkl4TlJVQThJeElKQ0k3ZHV4UUdudnQyclZQZEVzeEgyUXM4RVZFOHZuOHNPclk3dTV1Z3pNQkFHL1F5VGFkVEgwWW80Ri85dXpaazVjdlh4NVhHUnVQeDluYUFkQlF0bS9mcmx4K2Z2bnk1WEdUcTNzUnc0RXZvbDZ4STFMYjJxRjlNb0JHRUE2SGxiZHlURmJtUE1oNDRKODdkMjR1bTgwZVZ4a2JDb1ZrMTY1ZHBxY0VBSTdidFd1WDhrRnROcHM5YnFveTUwSEdBMTlFNUtPUFBucEI1ZmF0U08yQWcrWnFBUHlzbzZORHVSQ2xYQzVYUC9yb294Y01UMGxFYkFwOEVaRXJWNjc4VEhYc2poMDdhTHNBd0pmaThianlWbzZJWG5ZK2ptMkJQems1T1hyanhvMnM2bmlkdnc0QmdCdDB0NlZ2M0xpUm5aeWNIRFU0cFMreExmQkZSQllXRnI2cmVvQWJDb1ZrejU0OXBxY0VBTGJaczJlUDhrSzFXcTNlWFZoWStLN2hLWDJKcllHdmM0QXJVdHZQVDZWU0pxY0VBTFpJcFZKYUYwanRPcWg5a0syQkwxSTd3RlY1SkdWWk1wbmtFQmVBcDNWMGRHZzFnc3puOHptN0Rtb2ZaSHZnaTRoY3ZYbzFwYnExSTFJN3hLV3JKZ0F2U2lhVFdvZTAxV3IxN3RXclZ4M1p5bkFrOE0rZE96ZDM2ZEtsd3pxZmtVcWxDSDBBbnBKTUpyVzNuUzlkdW5UWTdxMmNaWTRFdm9qSXhNVEVMN0xaYkVibk0zYnUzRW1UTlFDZUVJbEVsRnNlTDh0bXM1bUppWWxmR0pyU1l6a1crQ0lpTjIvZUhDb1dpeVhWOGN1Vk80UStBRGRGSWhHdGlod1JrV0t4V0xwNTgrYVF3V2s5bHFPQnYxUzE4ejJkL1h4Q0g0Q2JUSVI5dFZxOW04MW12K2ZVVnM0eVJ3TmZwTlpSVTNjL2Z6bjAyZE1INEtSa01xa2Q5aUsxZlh2VG5URHJzZUx1WGVYRnRwYSt2cjUzdG16Wm92M1htVXdtSS9Qejh5YW1CQUNQWk9LQVZrVGswMDgvSFhPaUJQTmhYQXQ4RVpIZHUzZi9jOE9HRGQvVS9aeVptUm1abnA0Mk1TVUErQmNkSFIxYXBaZkxybDI3OXNtSEgzNzRMUU5UVXVKcTRJdUlEQXdNZkJhTlJtTzZuek0vUHkrWmpGWVJFQUQ4QzFNbDRmbDhQamMrUHY0TkExTlM1dmdlL2xkZHZYbzFwVk81c3l5WlRNckF3QUFOMXdBWUVRcUZaR0Jnd0VqWUY0dkZrbE9YcTc2TzZ5dDhFWkhPenM2MlRaczJuV3R0YlczUi9heEtwU0tuVDUrV2hZVUZFMU1ERUVEeGVOeFl4OTVpc1ZpNmN1VktwOU1WT1EvamljQVhxWVgrdG0zYkxqUTFOYTB3OFhuczZ3TlFZV3EvWHFSV2Zubmh3b1Z0WGdoN0VROEZ2b2hJZDNmM2kxdTNibjNiVk9nWENnVTVmZnEwTEM0dW12ZzRBQTBzSEE3THJsMjdqTjN4cVZhcmR5OWV2UGpEcWFtcFB4cjVRQU04RmZnaTVrTy9VcW5Jek15TW5EOS8zc1RIQVdoQTI3ZHZseDA3ZGhnN0EvUmkySXQ0TVBCRnpPN3BMMXRZV0pDcHFTa3BGQXFtUGhLQXowVWlFZW51N2piNnBLcVg5dXkveXBPQkwySlA2SXZJdmRWK3BWSXgrYkVBZkNRVUN0MWIxWnZrNWJBWDhYRGdpOVJDZitQR2pSa1RkZm9QcWxRcWN1Yk1HVzdvQWdHVVRDWmw1ODZkeGt1NDgvbDg3dXJWcXltdmhyMkl4d04vbWFrYnVWOVZLcFhrNDQ4L3BvUVRDSUI0UEM1UFBmV1V0TFFZM1RRUUVmZHYwTmJMRjRFdllxNzN6c01zTEN6SStmUG5KWnZOMnZIeEFGeVVTQ1JrKy9idFJ2ZnBIK1JtYnh5cmZCUDRJaUs5dmIyL2Z2TEpKMTh4VmNIelZhVlNTYWFucDlucUFSckE4bnZZZHF6b1JXcVZPSmN1WFRyczVBTW11bndWK0NJaVhWMWQvWWxFNHErbUQzTWZWS2xVNU1LRkN6SS9QMDhOUCtBajRYQllrc21rYk51MnpkWTJLOFZpc1pUTlpyL25Sb3RqSGI0TGZKSGFZZTdhdFd2SEVvbUU3YjBwc3Rtc1pMTlpWdjJBaHlXVFNVa2tFcEpJSkd6L3JtdzJtN2w1OCthUWx3OW5IOFdYZ2IvTTdpMmVCMVVxbFh2aHoxNC80TDdsZ0U4a0VvNDBUZlRqRnM1WCtUcndSZXdyM1h5Y2JEWXJDd3NMa3MxbTJmWUJIQkFPaHlXUlNFZzhIbmRrSmY4Z1A1UmMxc1AzZ2Irc3I2L3ZuVVFpc2RlSjFmNVhsVW9sdVg3OXVoUUtCY25uODVSNUFnYkU0M0dKUnFNU2lVUmsvZnIxdGgyK2ZwMmx0MmVQKzZVSzUzRWFKdkJGYXF2OWVEeit0M1hyMWpuNzgvOFFoVUpCRmhjWDcvMElWQ29WS1JRSzNQQUZIaEFLaFNRU2lVZ29GTG9YN3VGdzJGZ0RNeDAzYnR6SUxpd3NmTmZ2cS9vSE5WVGdMK3ZwNlVsdjJyVHB0ODNOelUxdXorVlJIdlczQVA1MmdFYnlxTnIzNVpEM29uSzVYTDF5NWNyUEppY25SOTJlaTJrTkdmakwzTnptQWVBdmpiWjk4ekFOSGZnaXRXMmVOV3ZXSE51OGVmT0EyM01CNEUyWEwxOGV2M1hyMXI1RzJyNTVtSVlQL0dWZFhWMzkwV2owcUIwOWVRRDQwN1ZyMXo3SjUvUERmcnRBcFNvd2diK3NxNnVydjdXMTlYZnIxNi92WmFzSENKNXF0WHIzK3ZYckU4Vmk4U2RCQ2ZwbGdRdjhaY3RiUGV2V3JYdkd5NGU3QU13b2w4dlZHemR1bkFyQzFzMmpCRGJ3SDVSS3BmNFFqVVovNFBUbExRRDJ5K2Z6dVh3Ky82ZE1Kdk5qdCtmaU5nTC9BVjFkWGYzaGNQaFhyUG9CZjF0ZXpTOHVMdjR5YU5zMlg0ZkFmNFR1N3U0WHcrSHd6Mk94V0RmaEQzaGZ1Vnl1NW5LNXFjWEZ4ZDk0N2ZGd3J5RHc2OURkM2YxaWMzUHova2drOHJTZGJaa0JXRk1zRmt1RlF1SHY1WEw1ZFVMKzhRaDhpem83Tzl1ZWVPS0psMWV2WHYzOTF0YldEbjRBQU9jVWk4VlNzVmljdm4zNzlsOCsvL3p6TjRKNitLcUt3RGVncDZjbkhRcUZCbGF2WHQzVDB0S3ltUjhCUUYreFdDeVZTcVhMdDIvZm5xeFVLdU9OMk9yQWFRUytUYnE2dXZwWHJWcjFuVkFvTkxCeTVjcHZORGMzZDZ4YXRhcFpSSVJxSUtCV1BTTWljdWZPblhLNVhKNys0b3N2UHF0VUt1TjM3dHo1QndldDlpRHdBU0FnVnJvOUFRQ0FNd2g4QUFnSUFoOEFBb0xBQjRDQUlQQUJJQ0FJZkFBSUNBSWZBQUtDd0FlQWdDRHdBU0FnL2hmbmFId2t6Zmk3Z2dBQUFBQkpSVTVFcmtKZ2dnPT0iLCJtZWRpYXR5cGUiOiJpbWFnZS9wbmcifV0sImluc3RhbGwiOnsic3BlYyI6eyJjbHVzdGVyUGVybWlzc2lvbnMiOlt7InJ1bGVzIjpbeyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJjb25maWdtYXBzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsiY29uZmlnbWFwcy9zdGF0dXMiXSwidmVyYnMiOlsiZGVsZXRlIiwiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJldmVudHMiXSwidmVyYnMiOlsiY3JlYXRlIiwicGF0Y2giXX0seyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJzZWNyZXRzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyIiXSwicmVzb3VyY2VzIjpbInNlcnZpY2VhY2NvdW50cyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJnZXQiLCJsaXN0IiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJzZXJ2aWNlcyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJnZXQiLCJsaXN0IiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiYXBwcyJdLCJyZXNvdXJjZXMiOlsiZGVwbG95bWVudHMiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiYXV0aGVudGljYXRpb24uazhzLmlvIl0sInJlc291cmNlcyI6WyJ0b2tlbnJldmlld3MiXSwidmVyYnMiOlsiY3JlYXRlIl19LHsiYXBpR3JvdXBzIjpbImF1dGhvcmluby5rdWFkcmFudC5pbyJdLCJyZXNvdXJjZXMiOlsiYXV0aGNvbmZpZ3MiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiYXV0aG9yaW5vLmt1YWRyYW50LmlvIl0sInJlc291cmNlcyI6WyJhdXRoY29uZmlncy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsiYXV0aG9yaXphdGlvbi5rOHMuaW8iXSwicmVzb3VyY2VzIjpbInN1YmplY3RhY2Nlc3NyZXZpZXdzIl0sInZlcmJzIjpbImNyZWF0ZSJdfSx7ImFwaUdyb3VwcyI6WyJjb29yZGluYXRpb24uazhzLmlvIl0sInJlc291cmNlcyI6WyJsZWFzZXMiXSwidmVyYnMiOlsiY3JlYXRlIiwiZ2V0IiwibGlzdCIsInVwZGF0ZSJdfSx7ImFwaUdyb3VwcyI6WyJvcGVyYXRvci5hdXRob3Jpbm8ua3VhZHJhbnQuaW8iXSwicmVzb3VyY2VzIjpbImF1dGhvcmlub3MiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsib3BlcmF0b3IuYXV0aG9yaW5vLmt1YWRyYW50LmlvIl0sInJlc291cmNlcyI6WyJhdXRob3Jpbm9zL2ZpbmFsaXplcnMiXSwidmVyYnMiOlsidXBkYXRlIl19LHsiYXBpR3JvdXBzIjpbIm9wZXJhdG9yLmF1dGhvcmluby5rdWFkcmFudC5pbyJdLCJyZXNvdXJjZXMiOlsiYXV0aG9yaW5vcy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsicmJhYy5hdXRob3JpemF0aW9uLms4cy5pbyJdLCJyZXNvdXJjZXMiOlsiY2x1c3RlcnJvbGViaW5kaW5ncyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJnZXQiLCJsaXN0IiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsicmJhYy5hdXRob3JpemF0aW9uLms4cy5pbyJdLCJyZXNvdXJjZXMiOlsiY2x1c3RlcnJvbGVzIl0sInZlcmJzIjpbImNyZWF0ZSIsImdldCIsImxpc3QiLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJyYmFjLmF1dGhvcml6YXRpb24uazhzLmlvIl0sInJlc291cmNlcyI6WyJyb2xlYmluZGluZ3MiXSwidmVyYnMiOlsiY3JlYXRlIiwiZ2V0IiwibGlzdCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbInJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8iXSwicmVzb3VyY2VzIjpbInJvbGVzIl0sInZlcmJzIjpbImNyZWF0ZSIsImdldCIsImxpc3QiLCJ1cGRhdGUiLCJ3YXRjaCJdfV0sInNlcnZpY2VBY2NvdW50TmFtZSI6ImF1dGhvcmluby1vcGVyYXRvciJ9XSwiZGVwbG95bWVudHMiOlt7ImxhYmVsIjp7ImNvbnRyb2wtcGxhbmUiOiJhdXRob3Jpbm8tb3BlcmF0b3IifSwibmFtZSI6ImF1dGhvcmluby1vcGVyYXRvciIsInNwZWMiOnsicmVwbGljYXMiOjEsInNlbGVjdG9yIjp7Im1hdGNoTGFiZWxzIjp7ImNvbnRyb2wtcGxhbmUiOiJhdXRob3Jpbm8tb3BlcmF0b3IifX0sInN0cmF0ZWd5Ijp7fSwidGVtcGxhdGUiOnsibWV0YWRhdGEiOnsibGFiZWxzIjp7ImNvbnRyb2wtcGxhbmUiOiJhdXRob3Jpbm8tb3BlcmF0b3IifX0sInNwZWMiOnsiY29udGFpbmVycyI6W3siYXJncyI6WyItLWxlYWRlci1lbGVjdCJdLCJjb21tYW5kIjpbIi9tYW5hZ2VyIl0sImVudiI6W3sibmFtZSI6IlJFTEFURURfSU1BR0VfQVVUSE9SSU5PIiwidmFsdWUiOiJyZWdpc3RyeS5yZWRoYXQuaW8vcmhjbC0xL2F1dGhvcmluby1yaGVsOUBzaGEyNTY6MjJkNDRiNWJjY2FjYWM0NGZmZTk2MjA2ZTY5YWM5MWUyMjU1N2YxYzRmYmZkNDYyNTJjNmJhOWI3MjBkN2Q2YSJ9XSwiaW1hZ2UiOiJyZWdpc3RyeS5yZWRoYXQuaW8vcmhjbC0xL2F1dGhvcmluby1yaGVsOS1vcGVyYXRvckBzaGEyNTY6MWIyZTg0MmI2NDJmODczN2RlOGIzMjI5ZTYyNGNiNTQ4NThkZTJjZmMyNzUwZGFiNTkzZDg5NDk2OGFkOGViZSIsImxpdmVuZXNzUHJvYmUiOnsiaHR0cEdldCI6eyJwYXRoIjoiL2hlYWx0aHoiLCJwb3J0Ijo4MDgxfSwiaW5pdGlhbERlbGF5U2Vjb25kcyI6MTUsInBlcmlvZFNlY29uZHMiOjIwfSwibmFtZSI6Im1hbmFnZXIiLCJwb3J0cyI6W3siY29udGFpbmVyUG9ydCI6ODA4MCwibmFtZSI6Im1ldHJpY3MifV0sInJlYWRpbmVzc1Byb2JlIjp7Imh0dHBHZXQiOnsicGF0aCI6Ii9yZWFkeXoiLCJwb3J0Ijo4MDgxfSwiaW5pdGlhbERlbGF5U2Vjb25kcyI6NSwicGVyaW9kU2Vjb25kcyI6MTB9LCJyZXNvdXJjZXMiOnsibGltaXRzIjp7ImNwdSI6IjIwMG0iLCJtZW1vcnkiOiIzMDBNaSJ9LCJyZXF1ZXN0cyI6eyJjcHUiOiIyMDBtIiwibWVtb3J5IjoiMjAwTWkifX0sInNlY3VyaXR5Q29udGV4dCI6eyJhbGxvd1ByaXZpbGVnZUVzY2FsYXRpb24iOmZhbHNlLCJjYXBhYmlsaXRpZXMiOnsiZHJvcCI6WyJBTEwiXX0sInJlYWRPbmx5Um9vdEZpbGVzeXN0ZW0iOnRydWUsInNlY2NvbXBQcm9maWxlIjp7InR5cGUiOiJSdW50aW1lRGVmYXVsdCJ9fX1dLCJzZWN1cml0eUNvbnRleHQiOnsicnVuQXNOb25Sb290Ijp0cnVlfSwic2VydmljZUFjY291bnROYW1lIjoiYXV0aG9yaW5vLW9wZXJhdG9yIiwidGVybWluYXRpb25HcmFjZVBlcmlvZFNlY29uZHMiOjEwfX19fV0sInBlcm1pc3Npb25zIjpbeyJydWxlcyI6W3siYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsiY29uZmlnbWFwcyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0Iiwid2F0Y2giLCJjcmVhdGUiLCJ1cGRhdGUiLCJwYXRjaCIsImRlbGV0ZSJdfSx7ImFwaUdyb3VwcyI6WyJjb29yZGluYXRpb24uazhzLmlvIl0sInJlc291cmNlcyI6WyJsZWFzZXMiXSwidmVyYnMiOlsiZ2V0IiwibGlzdCIsIndhdGNoIiwiY3JlYXRlIiwidXBkYXRlIiwicGF0Y2giLCJkZWxldGUiXX0seyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJldmVudHMiXSwidmVyYnMiOlsiY3JlYXRlIiwicGF0Y2giXX1dLCJzZXJ2aWNlQWNjb3VudE5hbWUiOiJhdXRob3Jpbm8tb3BlcmF0b3IifV19LCJzdHJhdGVneSI6ImRlcGxveW1lbnQifSwiaW5zdGFsbE1vZGVzIjpbeyJzdXBwb3J0ZWQiOmZhbHNlLCJ0eXBlIjoiT3duTmFtZXNwYWNlIn0seyJzdXBwb3J0ZWQiOmZhbHNlLCJ0eXBlIjoiU2luZ2xlTmFtZXNwYWNlIn0seyJzdXBwb3J0ZWQiOmZhbHNlLCJ0eXBlIjoiTXVsdGlOYW1lc3BhY2UifSx7InN1cHBvcnRlZCI6dHJ1ZSwidHlwZSI6IkFsbE5hbWVzcGFjZXMifV0sImtleXdvcmRzIjpbIkF1dGhvcmlubyIsIkF1dGhvcmlubyBPcGVyYXRvciIsIkt1YWRyYW50IiwiQXV0aG9yaXphdGlvbiIsIkF1dGhlbnRpY2F0aW9uIl0sImxpbmtzIjpbeyJuYW1lIjoiQXV0aG9yaW5vIE9wZXJhdG9yIiwidXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL0t1YWRyYW50L2F1dGhvcmluby1vcGVyYXRvciJ9LHsibmFtZSI6IkF1dGhvcmlubyIsInVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9LdWFkcmFudC9hdXRob3Jpbm8ifV0sIm1haW50YWluZXJzIjpbeyJlbWFpbCI6ImRjZXNhcmVAcmVkaGF0LmNvbSIsIm5hbWUiOiJEaWRpZXIgRGkgQ2VzYXJlIn0seyJlbWFpbCI6ImVhc3RpemxlQHJlZGhhdC5jb20iLCJuYW1lIjoiRWd1emtpIEFzdGl6IExlemF1biJ9LHsiZW1haWwiOiJtY2Fzc29sYUByZWRoYXQuY29tIiwibmFtZSI6Ikd1aWxoZXJtZSBDYXNzb2xhdG8ifV0sIm1hdHVyaXR5IjoiYWxwaGEiLCJtaW5LdWJlVmVyc2lvbiI6IjEuMjUuMCIsInByb3ZpZGVyIjp7Im5hbWUiOiJSZWQgSGF0In0sInJlbGF0ZWRJbWFnZXMiOlt7ImltYWdlIjoicmVnaXN0cnkucmVkaGF0LmlvL3JoY2wtMS9hdXRob3Jpbm8tcmhlbDlAc2hhMjU2OjIyZDQ0YjViY2NhY2FjNDRmZmU5NjIwNmU2OWFjOTFlMjI1NTdmMWM0ZmJmZDQ2MjUyYzZiYTliNzIwZDdkNmEiLCJuYW1lIjoiYXV0aG9yaW5vIn1dLCJ2ZXJzaW9uIjoiMS4yLjMifX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoiYXV0aG9yaW5vLW1hbmFnZXItazhzLWF1dGgtcm9sZSJ9LCJydWxlcyI6W3siYXBpR3JvdXBzIjpbImF1dGhlbnRpY2F0aW9uLms4cy5pbyJdLCJyZXNvdXJjZXMiOlsidG9rZW5yZXZpZXdzIl0sInZlcmJzIjpbImNyZWF0ZSJdfSx7ImFwaUdyb3VwcyI6WyJhdXRob3JpemF0aW9uLms4cy5pbyJdLCJyZXNvdXJjZXMiOlsic3ViamVjdGFjY2Vzc3Jldmlld3MiXSwidmVyYnMiOlsiY3JlYXRlIl19XX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoiYXV0aG9yaW5vLW1hbmFnZXItcm9sZSJ9LCJydWxlcyI6W3siYXBpR3JvdXBzIjpbImF1dGhvcmluby5rdWFkcmFudC5pbyJdLCJyZXNvdXJjZXMiOlsiYXV0aGNvbmZpZ3MiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiYXV0aG9yaW5vLmt1YWRyYW50LmlvIl0sInJlc291cmNlcyI6WyJhdXRoY29uZmlncy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsiY29vcmRpbmF0aW9uLms4cy5pbyJdLCJyZXNvdXJjZXMiOlsibGVhc2VzIl0sInZlcmJzIjpbImNyZWF0ZSIsImdldCIsImxpc3QiLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJzZWNyZXRzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCJdfV19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoiYXV0aG9yaW5vLWF1dGhjb25maWctZWRpdG9yLXJvbGUifSwicnVsZXMiOlt7ImFwaUdyb3VwcyI6WyJhdXRob3Jpbm8ua3VhZHJhbnQuaW8iXSwicmVzb3VyY2VzIjpbImF1dGhjb25maWdzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSJdfSx7ImFwaUdyb3VwcyI6WyJhdXRob3Jpbm8ua3VhZHJhbnQuaW8iXSwicmVzb3VyY2VzIjpbImF1dGhjb25maWdzL3N0YXR1cyJdLCJ2ZXJicyI6WyJnZXQiXX1dfQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoiYXV0aG9yaW5vLWF1dGhjb25maWctdmlld2VyLXJvbGUifSwicnVsZXMiOlt7ImFwaUdyb3VwcyI6WyJhdXRob3Jpbm8ua3VhZHJhbnQuaW8iXSwicmVzb3VyY2VzIjpbImF1dGhjb25maWdzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJhdXRob3Jpbm8ua3VhZHJhbnQuaW8iXSwicmVzb3VyY2VzIjpbImF1dGhjb25maWdzL3N0YXR1cyJdLCJ2ZXJicyI6WyJnZXQiXX1dfQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODFcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogYWFjM2ExNWQuYXV0aG9yaW5vLmt1YWRyYW50LmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtYW5hZ2VyLWNvbmZpZyJ9fQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImF1dGhvcmluby1vcGVyYXRvciJ9LCJuYW1lIjoiYXV0aG9yaW5vLW9wZXJhdG9yLW1ldHJpY3MifSwic3BlYyI6eyJwb3J0cyI6W3sibmFtZSI6Im1ldHJpY3MiLCJwb3J0Ijo4MDgwLCJ0YXJnZXRQb3J0IjoibWV0cmljcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImF1dGhvcmluby1vcGVyYXRvciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiYXBwIjoiYXV0aG9yaW5vIiwiYXV0aG9yaW5vLWNvbXBvbmVudCI6ImF1dGhvcmluby13ZWJob29rcyJ9LCJuYW1lIjoiYXV0aG9yaW5vLXdlYmhvb2tzIn0sInNwZWMiOnsicG9ydHMiOlt7InBvcnQiOjQ0MywicHJvdG9jb2wiOiJUQ1AiLCJ0YXJnZXRQb3J0Ijo5NDQzfV0sInNlbGVjdG9yIjp7ImFwcCI6ImF1dGhvcmlubyIsImF1dGhvcmluby1jb21wb25lbnQiOiJhdXRob3Jpbm8td2ViaG9va3MifX0sInN0YXR1cyI6eyJsb2FkQmFsYW5jZXIiOnt9fX0=
relatedImages:
  - image: quay.io/redhat-user-workloads/api-management-tenant/rhcl-1-1-authorino-operator-bundle@sha256:71c2187aafb30b3fc59da1534147ef2cf5fa9f8217c74479b723da4764c08a85
    name: ""
  - image: registry.redhat.io/rhcl-1/authorino-rhel9-operator@sha256:1b2e842b642f8737de8b3229e624cb54858de2cfc2750dab593d894968ad8ebe
    name: ""
  - image: registry.redhat.io/rhcl-1/authorino-rhel9@sha256:22d44b5bccacac44ffe96206e69ac91e22557f1c4fbfd46252c6ba9b720d7d6a
    name: authorino
schema: olm.bundle
